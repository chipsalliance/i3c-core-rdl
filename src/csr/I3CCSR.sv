// SPDX-License-Identifier: Apache-2.0
// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module I3CCSR (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [11:0] s_cpuif_addr,
        input wire [31:0] s_cpuif_wr_data,
        input wire [31:0] s_cpuif_wr_biten,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [31:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input I3CCSR_pkg::I3CCSR__in_t hwif_in,
        output I3CCSR_pkg::I3CCSR__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [11:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign cpuif_wr_biten = s_cpuif_wr_biten;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;
    logic external_req;
    logic external_pending;
    logic external_wr_ack;
    logic external_rd_ack;
    always_ff @(posedge clk) begin
        if(rst) begin
            external_pending <= '0;
        end else begin
            if(external_req & ~external_wr_ack & ~external_rd_ack) external_pending <= '1;
            else if(external_wr_ack | external_rd_ack) external_pending <= '0;
            assert(!external_wr_ack || (external_pending | external_req))
                else $error("An external wr_ack strobe was asserted when no external request was active");
            assert(!external_rd_ack || (external_pending | external_req))
                else $error("An external rd_ack strobe was asserted when no external request was active");
        end
    end

    // Read & write latencies are balanced. Stalls not required
    // except if external
    assign cpuif_req_stall_rd = external_pending;
    assign cpuif_req_stall_wr = external_pending;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            logic HCI_VERSION;
            logic HC_CONTROL;
            logic CONTROLLER_DEVICE_ADDR;
            logic HC_CAPABILITIES;
            logic RESET_CONTROL;
            logic PRESENT_STATE;
            logic INTR_STATUS;
            logic INTR_STATUS_ENABLE;
            logic INTR_SIGNAL_ENABLE;
            logic INTR_FORCE;
            logic DAT_SECTION_OFFSET;
            logic DCT_SECTION_OFFSET;
            logic RING_HEADERS_SECTION_OFFSET;
            logic PIO_SECTION_OFFSET;
            logic EXT_CAPS_SECTION_OFFSET;
            logic INT_CTRL_CMDS_EN;
            logic IBI_NOTIFY_CTRL;
            logic IBI_DATA_ABORT_CTRL;
            logic DEV_CTX_BASE_LO;
            logic DEV_CTX_BASE_HI;
            logic DEV_CTX_SG;
        } I3CBase;
        struct {
            logic COMMAND_PORT;
            logic RESPONSE_PORT;
            logic XFER_DATA_PORT;
            logic IBI_PORT;
            logic QUEUE_THLD_CTRL;
            logic DATA_BUFFER_THLD_CTRL;
            logic QUEUE_SIZE;
            logic ALT_QUEUE_SIZE;
            logic PIO_INTR_STATUS;
            logic PIO_INTR_STATUS_ENABLE;
            logic PIO_INTR_SIGNAL_ENABLE;
            logic PIO_INTR_FORCE;
            logic PIO_CONTROL;
        } PIOControl;
        logic DAT;
        logic DCT;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_strb_is_external;

    logic [11:0] decoded_addr;

    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        automatic logic is_external;
        is_external = '0;
        decoded_reg_strb.I3CBase.HCI_VERSION = cpuif_req_masked & (cpuif_addr == 12'h0);
        decoded_reg_strb.I3CBase.HC_CONTROL = cpuif_req_masked & (cpuif_addr == 12'h4);
        decoded_reg_strb.I3CBase.CONTROLLER_DEVICE_ADDR = cpuif_req_masked & (cpuif_addr == 12'h8);
        decoded_reg_strb.I3CBase.HC_CAPABILITIES = cpuif_req_masked & (cpuif_addr == 12'hc);
        decoded_reg_strb.I3CBase.RESET_CONTROL = cpuif_req_masked & (cpuif_addr == 12'h10);
        decoded_reg_strb.I3CBase.PRESENT_STATE = cpuif_req_masked & (cpuif_addr == 12'h14);
        decoded_reg_strb.I3CBase.INTR_STATUS = cpuif_req_masked & (cpuif_addr == 12'h20);
        decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE = cpuif_req_masked & (cpuif_addr == 12'h24);
        decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE = cpuif_req_masked & (cpuif_addr == 12'h28);
        decoded_reg_strb.I3CBase.INTR_FORCE = cpuif_req_masked & (cpuif_addr == 12'h2c);
        decoded_reg_strb.I3CBase.DAT_SECTION_OFFSET = cpuif_req_masked & (cpuif_addr == 12'h30);
        decoded_reg_strb.I3CBase.DCT_SECTION_OFFSET = cpuif_req_masked & (cpuif_addr == 12'h34);
        decoded_reg_strb.I3CBase.RING_HEADERS_SECTION_OFFSET = cpuif_req_masked & (cpuif_addr == 12'h38);
        decoded_reg_strb.I3CBase.PIO_SECTION_OFFSET = cpuif_req_masked & (cpuif_addr == 12'h3c);
        decoded_reg_strb.I3CBase.EXT_CAPS_SECTION_OFFSET = cpuif_req_masked & (cpuif_addr == 12'h40);
        decoded_reg_strb.I3CBase.INT_CTRL_CMDS_EN = cpuif_req_masked & (cpuif_addr == 12'h4c);
        decoded_reg_strb.I3CBase.IBI_NOTIFY_CTRL = cpuif_req_masked & (cpuif_addr == 12'h58);
        decoded_reg_strb.I3CBase.IBI_DATA_ABORT_CTRL = cpuif_req_masked & (cpuif_addr == 12'h5c);
        decoded_reg_strb.I3CBase.DEV_CTX_BASE_LO = cpuif_req_masked & (cpuif_addr == 12'h60);
        decoded_reg_strb.I3CBase.DEV_CTX_BASE_HI = cpuif_req_masked & (cpuif_addr == 12'h64);
        decoded_reg_strb.I3CBase.DEV_CTX_SG = cpuif_req_masked & (cpuif_addr == 12'h68);
        decoded_reg_strb.PIOControl.COMMAND_PORT = cpuif_req_masked & (cpuif_addr == 12'h100);
        is_external |= cpuif_req_masked & (cpuif_addr == 12'h100) & cpuif_req_is_wr;
        decoded_reg_strb.PIOControl.RESPONSE_PORT = cpuif_req_masked & (cpuif_addr == 12'h104);
        is_external |= cpuif_req_masked & (cpuif_addr == 12'h104) & !cpuif_req_is_wr;
        decoded_reg_strb.PIOControl.XFER_DATA_PORT = cpuif_req_masked & (cpuif_addr == 12'h108);
        is_external |= cpuif_req_masked & (cpuif_addr == 12'h108);
        decoded_reg_strb.PIOControl.IBI_PORT = cpuif_req_masked & (cpuif_addr == 12'h10c);
        is_external |= cpuif_req_masked & (cpuif_addr == 12'h10c) & !cpuif_req_is_wr;
        decoded_reg_strb.PIOControl.QUEUE_THLD_CTRL = cpuif_req_masked & (cpuif_addr == 12'h110);
        decoded_reg_strb.PIOControl.DATA_BUFFER_THLD_CTRL = cpuif_req_masked & (cpuif_addr == 12'h114);
        decoded_reg_strb.PIOControl.QUEUE_SIZE = cpuif_req_masked & (cpuif_addr == 12'h118);
        decoded_reg_strb.PIOControl.ALT_QUEUE_SIZE = cpuif_req_masked & (cpuif_addr == 12'h11c);
        decoded_reg_strb.PIOControl.PIO_INTR_STATUS = cpuif_req_masked & (cpuif_addr == 12'h120);
        decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE = cpuif_req_masked & (cpuif_addr == 12'h124);
        decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE = cpuif_req_masked & (cpuif_addr == 12'h128);
        decoded_reg_strb.PIOControl.PIO_INTR_FORCE = cpuif_req_masked & (cpuif_addr == 12'h12c);
        decoded_reg_strb.PIOControl.PIO_CONTROL = cpuif_req_masked & (cpuif_addr == 12'h130);
        decoded_reg_strb.DAT = cpuif_req_masked & (cpuif_addr >= 12'h400) & (cpuif_addr <= 12'h400 + 12'h3ff);
        is_external |= cpuif_req_masked & (cpuif_addr >= 12'h400) & (cpuif_addr <= 12'h400 + 12'h3ff);
        decoded_reg_strb.DCT = cpuif_req_masked & (cpuif_addr >= 12'h800) & (cpuif_addr <= 12'h800 + 12'h7ff);
        is_external |= cpuif_req_masked & (cpuif_addr >= 12'h800) & (cpuif_addr <= 12'h800 + 12'h7ff);
        decoded_strb_is_external = is_external;
        external_req = is_external;
    end

    // Pass down signals to next stage
    assign decoded_addr = cpuif_addr;

    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                struct {
                    logic next;
                    logic load_next;
                } iba_include;
                struct {
                    logic next;
                    logic load_next;
                } i2c_devs;
                struct {
                    logic next;
                    logic load_next;
                } hot_join;
                struct {
                    logic next;
                    logic load_next;
                } halt_on_cmd_seq_timeout;
                struct {
                    logic next;
                    logic load_next;
                } abort;
                struct {
                    logic next;
                    logic load_next;
                } resume;
                struct {
                    logic next;
                    logic load_next;
                } bus_enable;
            } HC_CONTROL;
            struct {
                struct {
                    logic [6:0] next;
                    logic load_next;
                } dynamic_addr;
                struct {
                    logic next;
                    logic load_next;
                } dynamic_addr_valid;
            } CONTROLLER_DEVICE_ADDR;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } soft_rst;
                struct {
                    logic next;
                    logic load_next;
                } cmd_queue;
                struct {
                    logic next;
                    logic load_next;
                } resp_queue;
                struct {
                    logic next;
                    logic load_next;
                } tx_fifo;
                struct {
                    logic next;
                    logic load_next;
                } rx_fifo;
                struct {
                    logic next;
                    logic load_next;
                } ibi_queue;
            } RESET_CONTROL;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } hc_internal_err;
                struct {
                    logic next;
                    logic load_next;
                } hc_seq_cancel_stat;
                struct {
                    logic next;
                    logic load_next;
                } hc_warn_cmd_seq_stall;
                struct {
                    logic next;
                    logic load_next;
                } hc_err_cmd_seq_timeout;
                struct {
                    logic next;
                    logic load_next;
                } sched_cmd_missed_tick;
            } INTR_STATUS;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } hc_internal_err_en;
                struct {
                    logic next;
                    logic load_next;
                } hc_seq_cancel_stat_en;
                struct {
                    logic next;
                    logic load_next;
                } hc_warn_cmd_seq_stall_en;
                struct {
                    logic next;
                    logic load_next;
                } hc_err_cmd_seq_timeout_en;
                struct {
                    logic next;
                    logic load_next;
                } sched_cmd_missed_tick_en;
            } INTR_STATUS_ENABLE;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } hc_internal_err_intr_en;
                struct {
                    logic next;
                    logic load_next;
                } hc_seq_cancel_stat_intr_en;
                struct {
                    logic next;
                    logic load_next;
                } hc_warn_cmd_seq_stall_intr_en;
                struct {
                    logic next;
                    logic load_next;
                } hc_err_cmd_seq_timeout_intr_en;
                struct {
                    logic next;
                    logic load_next;
                } sched_cmd_missed_tick_intr_en;
            } INTR_SIGNAL_ENABLE;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } force_hc_internal_err;
                struct {
                    logic next;
                    logic load_next;
                } force_hc_seq_cancel_stat;
                struct {
                    logic next;
                    logic load_next;
                } force_hc_warn_cmd_seq_stall;
                struct {
                    logic next;
                    logic load_next;
                } force_hc_err_cmd_seq_timeout;
                struct {
                    logic next;
                    logic load_next;
                } force_sched_cmd_missed_tick;
            } INTR_FORCE;
            struct {
                struct {
                    logic [4:0] next;
                    logic load_next;
                } table_idx;
            } DCT_SECTION_OFFSET;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } hj_rejected;
                struct {
                    logic next;
                    logic load_next;
                } crr_rejected;
                struct {
                    logic next;
                    logic load_next;
                } ibi_rejected;
            } IBI_NOTIFY_CTRL;
            struct {
                struct {
                    logic [7:0] next;
                    logic load_next;
                } match_id;
                struct {
                    logic [1:0] next;
                    logic load_next;
                } max_data_length;
                struct {
                    logic [2:0] next;
                    logic load_next;
                } ibi_match_statsus;
                struct {
                    logic next;
                    logic load_next;
                } data_abort_monitor;
            } IBI_DATA_ABORT_CTRL;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } base_lo;
            } DEV_CTX_BASE_LO;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } base_hi;
            } DEV_CTX_BASE_HI;
        } I3CBase;
        struct {
            struct {
                struct {
                    logic [7:0] next;
                    logic load_next;
                } cmd_empty;
                struct {
                    logic [7:0] next;
                    logic load_next;
                } resp_buf;
                struct {
                    logic [7:0] next;
                    logic load_next;
                } ibi_data_size;
                struct {
                    logic [7:0] next;
                    logic load_next;
                } ibi_status;
            } QUEUE_THLD_CTRL;
            struct {
                struct {
                    logic [2:0] next;
                    logic load_next;
                } tx_bux;
                struct {
                    logic [2:0] next;
                    logic load_next;
                } rx_buf;
                struct {
                    logic [2:0] next;
                    logic load_next;
                } tx_start_log;
                struct {
                    logic [2:0] next;
                    logic load_next;
                } rx_start_log;
            } DATA_BUFFER_THLD_CTRL;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } tx_threshold;
                struct {
                    logic next;
                    logic load_next;
                } rx_threshold;
                struct {
                    logic next;
                    logic load_next;
                } ibi_status;
                struct {
                    logic next;
                    logic load_next;
                } cmd_queue_ready;
                struct {
                    logic next;
                    logic load_next;
                } resp_ready;
                struct {
                    logic next;
                    logic load_next;
                } transfer_abort;
                struct {
                    logic next;
                    logic load_next;
                } transfer_err;
            } PIO_INTR_STATUS;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } tx_threshold_en;
                struct {
                    logic next;
                    logic load_next;
                } rx_threshold_en;
                struct {
                    logic next;
                    logic load_next;
                } ibi_status_en;
                struct {
                    logic next;
                    logic load_next;
                } cmd_queue_ready_en;
                struct {
                    logic next;
                    logic load_next;
                } resp_ready_en;
                struct {
                    logic next;
                    logic load_next;
                } transfer_abort_en;
                struct {
                    logic next;
                    logic load_next;
                } transfer_err_en;
            } PIO_INTR_STATUS_ENABLE;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } tx_threshold_intr_en;
                struct {
                    logic next;
                    logic load_next;
                } rx_threshold_intr_en;
                struct {
                    logic next;
                    logic load_next;
                } ibi_status_intr_en;
                struct {
                    logic next;
                    logic load_next;
                } cmd_queue_ready_intr_en;
                struct {
                    logic next;
                    logic load_next;
                } resp_ready_intr_en;
                struct {
                    logic next;
                    logic load_next;
                } transfer_abort_intr_en;
                struct {
                    logic next;
                    logic load_next;
                } transfer_err_intr_en;
            } PIO_INTR_SIGNAL_ENABLE;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } force_tx_threshold;
                struct {
                    logic next;
                    logic load_next;
                } force_rx_threshold;
                struct {
                    logic next;
                    logic load_next;
                } force_ibi_status;
                struct {
                    logic next;
                    logic load_next;
                } force_cmd_queue_ready;
                struct {
                    logic next;
                    logic load_next;
                } force_resp_ready;
                struct {
                    logic next;
                    logic load_next;
                } force_transfer_abort;
                struct {
                    logic next;
                    logic load_next;
                } force_transfer_err;
            } PIO_INTR_FORCE;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } enable_req;
                struct {
                    logic next;
                    logic load_next;
                } rs_req;
                struct {
                    logic next;
                    logic load_next;
                } abort_req;
            } PIO_CONTROL;
        } PIOControl;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                struct {
                    logic value;
                } iba_include;
                struct {
                    logic value;
                } i2c_devs;
                struct {
                    logic value;
                } hot_join;
                struct {
                    logic value;
                } halt_on_cmd_seq_timeout;
                struct {
                    logic value;
                } abort;
                struct {
                    logic value;
                } resume;
                struct {
                    logic value;
                } bus_enable;
            } HC_CONTROL;
            struct {
                struct {
                    logic [6:0] value;
                } dynamic_addr;
                struct {
                    logic value;
                } dynamic_addr_valid;
            } CONTROLLER_DEVICE_ADDR;
            struct {
                struct {
                    logic value;
                } soft_rst;
                struct {
                    logic value;
                } cmd_queue;
                struct {
                    logic value;
                } resp_queue;
                struct {
                    logic value;
                } tx_fifo;
                struct {
                    logic value;
                } rx_fifo;
                struct {
                    logic value;
                } ibi_queue;
            } RESET_CONTROL;
            struct {
                struct {
                    logic value;
                } hc_internal_err;
                struct {
                    logic value;
                } hc_seq_cancel_stat;
                struct {
                    logic value;
                } hc_warn_cmd_seq_stall;
                struct {
                    logic value;
                } hc_err_cmd_seq_timeout;
                struct {
                    logic value;
                } sched_cmd_missed_tick;
            } INTR_STATUS;
            struct {
                struct {
                    logic value;
                } hc_internal_err_en;
                struct {
                    logic value;
                } hc_seq_cancel_stat_en;
                struct {
                    logic value;
                } hc_warn_cmd_seq_stall_en;
                struct {
                    logic value;
                } hc_err_cmd_seq_timeout_en;
                struct {
                    logic value;
                } sched_cmd_missed_tick_en;
            } INTR_STATUS_ENABLE;
            struct {
                struct {
                    logic value;
                } hc_internal_err_intr_en;
                struct {
                    logic value;
                } hc_seq_cancel_stat_intr_en;
                struct {
                    logic value;
                } hc_warn_cmd_seq_stall_intr_en;
                struct {
                    logic value;
                } hc_err_cmd_seq_timeout_intr_en;
                struct {
                    logic value;
                } sched_cmd_missed_tick_intr_en;
            } INTR_SIGNAL_ENABLE;
            struct {
                struct {
                    logic value;
                } force_hc_internal_err;
                struct {
                    logic value;
                } force_hc_seq_cancel_stat;
                struct {
                    logic value;
                } force_hc_warn_cmd_seq_stall;
                struct {
                    logic value;
                } force_hc_err_cmd_seq_timeout;
                struct {
                    logic value;
                } force_sched_cmd_missed_tick;
            } INTR_FORCE;
            struct {
                struct {
                    logic [4:0] value;
                } table_idx;
            } DCT_SECTION_OFFSET;
            struct {
                struct {
                    logic value;
                } hj_rejected;
                struct {
                    logic value;
                } crr_rejected;
                struct {
                    logic value;
                } ibi_rejected;
            } IBI_NOTIFY_CTRL;
            struct {
                struct {
                    logic [7:0] value;
                } match_id;
                struct {
                    logic [1:0] value;
                } max_data_length;
                struct {
                    logic [2:0] value;
                } ibi_match_statsus;
                struct {
                    logic value;
                } data_abort_monitor;
            } IBI_DATA_ABORT_CTRL;
            struct {
                struct {
                    logic value;
                } base_lo;
            } DEV_CTX_BASE_LO;
            struct {
                struct {
                    logic value;
                } base_hi;
            } DEV_CTX_BASE_HI;
        } I3CBase;
        struct {
            struct {
                struct {
                    logic [7:0] value;
                } cmd_empty;
                struct {
                    logic [7:0] value;
                } resp_buf;
                struct {
                    logic [7:0] value;
                } ibi_data_size;
                struct {
                    logic [7:0] value;
                } ibi_status;
            } QUEUE_THLD_CTRL;
            struct {
                struct {
                    logic [2:0] value;
                } tx_bux;
                struct {
                    logic [2:0] value;
                } rx_buf;
                struct {
                    logic [2:0] value;
                } tx_start_log;
                struct {
                    logic [2:0] value;
                } rx_start_log;
            } DATA_BUFFER_THLD_CTRL;
            struct {
                struct {
                    logic value;
                } tx_threshold;
                struct {
                    logic value;
                } rx_threshold;
                struct {
                    logic value;
                } ibi_status;
                struct {
                    logic value;
                } cmd_queue_ready;
                struct {
                    logic value;
                } resp_ready;
                struct {
                    logic value;
                } transfer_abort;
                struct {
                    logic value;
                } transfer_err;
            } PIO_INTR_STATUS;
            struct {
                struct {
                    logic value;
                } tx_threshold_en;
                struct {
                    logic value;
                } rx_threshold_en;
                struct {
                    logic value;
                } ibi_status_en;
                struct {
                    logic value;
                } cmd_queue_ready_en;
                struct {
                    logic value;
                } resp_ready_en;
                struct {
                    logic value;
                } transfer_abort_en;
                struct {
                    logic value;
                } transfer_err_en;
            } PIO_INTR_STATUS_ENABLE;
            struct {
                struct {
                    logic value;
                } tx_threshold_intr_en;
                struct {
                    logic value;
                } rx_threshold_intr_en;
                struct {
                    logic value;
                } ibi_status_intr_en;
                struct {
                    logic value;
                } cmd_queue_ready_intr_en;
                struct {
                    logic value;
                } resp_ready_intr_en;
                struct {
                    logic value;
                } transfer_abort_intr_en;
                struct {
                    logic value;
                } transfer_err_intr_en;
            } PIO_INTR_SIGNAL_ENABLE;
            struct {
                struct {
                    logic value;
                } force_tx_threshold;
                struct {
                    logic value;
                } force_rx_threshold;
                struct {
                    logic value;
                } force_ibi_status;
                struct {
                    logic value;
                } force_cmd_queue_ready;
                struct {
                    logic value;
                } force_resp_ready;
                struct {
                    logic value;
                } force_transfer_abort;
                struct {
                    logic value;
                } force_transfer_err;
            } PIO_INTR_FORCE;
            struct {
                struct {
                    logic value;
                } enable_req;
                struct {
                    logic value;
                } rs_req;
                struct {
                    logic value;
                } abort_req;
            } PIO_CONTROL;
        } PIOControl;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: I3CCSR.I3CBase.HC_CONTROL.iba_include
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.HC_CONTROL.iba_include.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.HC_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.HC_CONTROL.iba_include.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.I3CBase.HC_CONTROL.iba_include.next = next_c;
        field_combo.I3CBase.HC_CONTROL.iba_include.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.HC_CONTROL.iba_include.value <= 1'h0;
        end else if(field_combo.I3CBase.HC_CONTROL.iba_include.load_next) begin
            field_storage.I3CBase.HC_CONTROL.iba_include.value <= field_combo.I3CBase.HC_CONTROL.iba_include.next;
        end
    end
    assign hwif_out.I3CBase.HC_CONTROL.iba_include.value = field_storage.I3CBase.HC_CONTROL.iba_include.value;
    // Field: I3CCSR.I3CBase.HC_CONTROL.i2c_devs
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.HC_CONTROL.i2c_devs.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.HC_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.HC_CONTROL.i2c_devs.value & ~decoded_wr_biten[7:7]) | (decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end
        field_combo.I3CBase.HC_CONTROL.i2c_devs.next = next_c;
        field_combo.I3CBase.HC_CONTROL.i2c_devs.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.HC_CONTROL.i2c_devs.value <= 1'h0;
        end else if(field_combo.I3CBase.HC_CONTROL.i2c_devs.load_next) begin
            field_storage.I3CBase.HC_CONTROL.i2c_devs.value <= field_combo.I3CBase.HC_CONTROL.i2c_devs.next;
        end
    end
    assign hwif_out.I3CBase.HC_CONTROL.i2c_devs.value = field_storage.I3CBase.HC_CONTROL.i2c_devs.value;
    // Field: I3CCSR.I3CBase.HC_CONTROL.hot_join
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.HC_CONTROL.hot_join.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.HC_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.HC_CONTROL.hot_join.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo.I3CBase.HC_CONTROL.hot_join.next = next_c;
        field_combo.I3CBase.HC_CONTROL.hot_join.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.HC_CONTROL.hot_join.value <= 1'h0;
        end else if(field_combo.I3CBase.HC_CONTROL.hot_join.load_next) begin
            field_storage.I3CBase.HC_CONTROL.hot_join.value <= field_combo.I3CBase.HC_CONTROL.hot_join.next;
        end
    end
    assign hwif_out.I3CBase.HC_CONTROL.hot_join.value = field_storage.I3CBase.HC_CONTROL.hot_join.value;
    // Field: I3CCSR.I3CBase.HC_CONTROL.halt_on_cmd_seq_timeout
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.HC_CONTROL.halt_on_cmd_seq_timeout.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.HC_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.HC_CONTROL.halt_on_cmd_seq_timeout.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end
        field_combo.I3CBase.HC_CONTROL.halt_on_cmd_seq_timeout.next = next_c;
        field_combo.I3CBase.HC_CONTROL.halt_on_cmd_seq_timeout.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.HC_CONTROL.halt_on_cmd_seq_timeout.value <= 1'h0;
        end else if(field_combo.I3CBase.HC_CONTROL.halt_on_cmd_seq_timeout.load_next) begin
            field_storage.I3CBase.HC_CONTROL.halt_on_cmd_seq_timeout.value <= field_combo.I3CBase.HC_CONTROL.halt_on_cmd_seq_timeout.next;
        end
    end
    assign hwif_out.I3CBase.HC_CONTROL.halt_on_cmd_seq_timeout.value = field_storage.I3CBase.HC_CONTROL.halt_on_cmd_seq_timeout.value;
    // Field: I3CCSR.I3CBase.HC_CONTROL.abort
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.HC_CONTROL.abort.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.HC_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.HC_CONTROL.abort.value & ~decoded_wr_biten[29:29]) | (decoded_wr_data[29:29] & decoded_wr_biten[29:29]);
            load_next_c = '1;
        end
        field_combo.I3CBase.HC_CONTROL.abort.next = next_c;
        field_combo.I3CBase.HC_CONTROL.abort.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.HC_CONTROL.abort.value <= 1'h0;
        end else if(field_combo.I3CBase.HC_CONTROL.abort.load_next) begin
            field_storage.I3CBase.HC_CONTROL.abort.value <= field_combo.I3CBase.HC_CONTROL.abort.next;
        end
    end
    assign hwif_out.I3CBase.HC_CONTROL.abort.value = field_storage.I3CBase.HC_CONTROL.abort.value;
    // Field: I3CCSR.I3CBase.HC_CONTROL.resume
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.HC_CONTROL.resume.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.HC_CONTROL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3CBase.HC_CONTROL.resume.value & ~(decoded_wr_data[30:30] & decoded_wr_biten[30:30]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3CBase.HC_CONTROL.resume.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.HC_CONTROL.resume.next = next_c;
        field_combo.I3CBase.HC_CONTROL.resume.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.HC_CONTROL.resume.value <= 1'h0;
        end else if(field_combo.I3CBase.HC_CONTROL.resume.load_next) begin
            field_storage.I3CBase.HC_CONTROL.resume.value <= field_combo.I3CBase.HC_CONTROL.resume.next;
        end
    end
    assign hwif_out.I3CBase.HC_CONTROL.resume.value = field_storage.I3CBase.HC_CONTROL.resume.value;
    // Field: I3CCSR.I3CBase.HC_CONTROL.bus_enable
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.HC_CONTROL.bus_enable.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.HC_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.HC_CONTROL.bus_enable.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3CBase.HC_CONTROL.bus_enable.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.HC_CONTROL.bus_enable.next = next_c;
        field_combo.I3CBase.HC_CONTROL.bus_enable.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.HC_CONTROL.bus_enable.value <= 1'h0;
        end else if(field_combo.I3CBase.HC_CONTROL.bus_enable.load_next) begin
            field_storage.I3CBase.HC_CONTROL.bus_enable.value <= field_combo.I3CBase.HC_CONTROL.bus_enable.next;
        end
    end
    assign hwif_out.I3CBase.HC_CONTROL.bus_enable.value = field_storage.I3CBase.HC_CONTROL.bus_enable.value;
    // Field: I3CCSR.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr
    always_comb begin
        automatic logic [6:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.CONTROLLER_DEVICE_ADDR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr.value & ~decoded_wr_biten[22:16]) | (decoded_wr_data[22:16] & decoded_wr_biten[22:16]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr.next = next_c;
        field_combo.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr.value <= 7'h0;
        end else if(field_combo.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr.load_next) begin
            field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr.value <= field_combo.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr.next;
        end
    end
    assign hwif_out.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr.value = field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr.value;
    // Field: I3CCSR.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr_valid
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr_valid.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.CONTROLLER_DEVICE_ADDR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr_valid.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr_valid.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr_valid.next = next_c;
        field_combo.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr_valid.value <= 1'h0;
        end else if(field_combo.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr_valid.load_next) begin
            field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr_valid.value <= field_combo.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr_valid.next;
        end
    end
    assign hwif_out.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr_valid.value = field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr_valid.value;
    // Field: I3CCSR.I3CBase.RESET_CONTROL.soft_rst
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.RESET_CONTROL.soft_rst.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.RESET_CONTROL.soft_rst.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3CBase.RESET_CONTROL.soft_rst.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.RESET_CONTROL.soft_rst.next = next_c;
        field_combo.I3CBase.RESET_CONTROL.soft_rst.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.RESET_CONTROL.soft_rst.value <= 1'h0;
        end else if(field_combo.I3CBase.RESET_CONTROL.soft_rst.load_next) begin
            field_storage.I3CBase.RESET_CONTROL.soft_rst.value <= field_combo.I3CBase.RESET_CONTROL.soft_rst.next;
        end
    end
    assign hwif_out.I3CBase.RESET_CONTROL.soft_rst.value = field_storage.I3CBase.RESET_CONTROL.soft_rst.value;
    // Field: I3CCSR.I3CBase.RESET_CONTROL.cmd_queue
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.RESET_CONTROL.cmd_queue.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.RESET_CONTROL.cmd_queue.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3CBase.RESET_CONTROL.cmd_queue.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.RESET_CONTROL.cmd_queue.next = next_c;
        field_combo.I3CBase.RESET_CONTROL.cmd_queue.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.RESET_CONTROL.cmd_queue.value <= 1'h0;
        end else if(field_combo.I3CBase.RESET_CONTROL.cmd_queue.load_next) begin
            field_storage.I3CBase.RESET_CONTROL.cmd_queue.value <= field_combo.I3CBase.RESET_CONTROL.cmd_queue.next;
        end
    end
    assign hwif_out.I3CBase.RESET_CONTROL.cmd_queue.value = field_storage.I3CBase.RESET_CONTROL.cmd_queue.value;
    // Field: I3CCSR.I3CBase.RESET_CONTROL.resp_queue
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.RESET_CONTROL.resp_queue.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.RESET_CONTROL.resp_queue.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3CBase.RESET_CONTROL.resp_queue.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.RESET_CONTROL.resp_queue.next = next_c;
        field_combo.I3CBase.RESET_CONTROL.resp_queue.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.RESET_CONTROL.resp_queue.value <= 1'h0;
        end else if(field_combo.I3CBase.RESET_CONTROL.resp_queue.load_next) begin
            field_storage.I3CBase.RESET_CONTROL.resp_queue.value <= field_combo.I3CBase.RESET_CONTROL.resp_queue.next;
        end
    end
    assign hwif_out.I3CBase.RESET_CONTROL.resp_queue.value = field_storage.I3CBase.RESET_CONTROL.resp_queue.value;
    // Field: I3CCSR.I3CBase.RESET_CONTROL.tx_fifo
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.RESET_CONTROL.tx_fifo.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.RESET_CONTROL.tx_fifo.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3CBase.RESET_CONTROL.tx_fifo.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.RESET_CONTROL.tx_fifo.next = next_c;
        field_combo.I3CBase.RESET_CONTROL.tx_fifo.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.RESET_CONTROL.tx_fifo.value <= 1'h0;
        end else if(field_combo.I3CBase.RESET_CONTROL.tx_fifo.load_next) begin
            field_storage.I3CBase.RESET_CONTROL.tx_fifo.value <= field_combo.I3CBase.RESET_CONTROL.tx_fifo.next;
        end
    end
    assign hwif_out.I3CBase.RESET_CONTROL.tx_fifo.value = field_storage.I3CBase.RESET_CONTROL.tx_fifo.value;
    // Field: I3CCSR.I3CBase.RESET_CONTROL.rx_fifo
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.RESET_CONTROL.rx_fifo.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.RESET_CONTROL.rx_fifo.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3CBase.RESET_CONTROL.rx_fifo.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.RESET_CONTROL.rx_fifo.next = next_c;
        field_combo.I3CBase.RESET_CONTROL.rx_fifo.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.RESET_CONTROL.rx_fifo.value <= 1'h0;
        end else if(field_combo.I3CBase.RESET_CONTROL.rx_fifo.load_next) begin
            field_storage.I3CBase.RESET_CONTROL.rx_fifo.value <= field_combo.I3CBase.RESET_CONTROL.rx_fifo.next;
        end
    end
    assign hwif_out.I3CBase.RESET_CONTROL.rx_fifo.value = field_storage.I3CBase.RESET_CONTROL.rx_fifo.value;
    // Field: I3CCSR.I3CBase.RESET_CONTROL.ibi_queue
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.RESET_CONTROL.ibi_queue.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.RESET_CONTROL.ibi_queue.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3CBase.RESET_CONTROL.ibi_queue.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.RESET_CONTROL.ibi_queue.next = next_c;
        field_combo.I3CBase.RESET_CONTROL.ibi_queue.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.RESET_CONTROL.ibi_queue.value <= 1'h0;
        end else if(field_combo.I3CBase.RESET_CONTROL.ibi_queue.load_next) begin
            field_storage.I3CBase.RESET_CONTROL.ibi_queue.value <= field_combo.I3CBase.RESET_CONTROL.ibi_queue.next;
        end
    end
    assign hwif_out.I3CBase.RESET_CONTROL.ibi_queue.value = field_storage.I3CBase.RESET_CONTROL.ibi_queue.value;
    // Field: I3CCSR.I3CBase.INTR_STATUS.hc_internal_err
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_STATUS.hc_internal_err.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3CBase.INTR_STATUS.hc_internal_err.value & ~(decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.INTR_STATUS.hc_internal_err.next != '0) begin // stickybit
            next_c = field_storage.I3CBase.INTR_STATUS.hc_internal_err.value | hwif_in.I3CBase.INTR_STATUS.hc_internal_err.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_STATUS.hc_internal_err.next = next_c;
        field_combo.I3CBase.INTR_STATUS.hc_internal_err.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.INTR_STATUS.hc_internal_err.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_STATUS.hc_internal_err.load_next) begin
            field_storage.I3CBase.INTR_STATUS.hc_internal_err.value <= field_combo.I3CBase.INTR_STATUS.hc_internal_err.next;
        end
    end
    // Field: I3CCSR.I3CBase.INTR_STATUS.hc_seq_cancel_stat
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_STATUS.hc_seq_cancel_stat.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3CBase.INTR_STATUS.hc_seq_cancel_stat.value & ~(decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.INTR_STATUS.hc_seq_cancel_stat.next != '0) begin // stickybit
            next_c = field_storage.I3CBase.INTR_STATUS.hc_seq_cancel_stat.value | hwif_in.I3CBase.INTR_STATUS.hc_seq_cancel_stat.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_STATUS.hc_seq_cancel_stat.next = next_c;
        field_combo.I3CBase.INTR_STATUS.hc_seq_cancel_stat.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.INTR_STATUS.hc_seq_cancel_stat.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_STATUS.hc_seq_cancel_stat.load_next) begin
            field_storage.I3CBase.INTR_STATUS.hc_seq_cancel_stat.value <= field_combo.I3CBase.INTR_STATUS.hc_seq_cancel_stat.next;
        end
    end
    // Field: I3CCSR.I3CBase.INTR_STATUS.hc_warn_cmd_seq_stall
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_STATUS.hc_warn_cmd_seq_stall.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3CBase.INTR_STATUS.hc_warn_cmd_seq_stall.value & ~(decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.INTR_STATUS.hc_warn_cmd_seq_stall.next != '0) begin // stickybit
            next_c = field_storage.I3CBase.INTR_STATUS.hc_warn_cmd_seq_stall.value | hwif_in.I3CBase.INTR_STATUS.hc_warn_cmd_seq_stall.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_STATUS.hc_warn_cmd_seq_stall.next = next_c;
        field_combo.I3CBase.INTR_STATUS.hc_warn_cmd_seq_stall.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.INTR_STATUS.hc_warn_cmd_seq_stall.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_STATUS.hc_warn_cmd_seq_stall.load_next) begin
            field_storage.I3CBase.INTR_STATUS.hc_warn_cmd_seq_stall.value <= field_combo.I3CBase.INTR_STATUS.hc_warn_cmd_seq_stall.next;
        end
    end
    // Field: I3CCSR.I3CBase.INTR_STATUS.hc_err_cmd_seq_timeout
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_STATUS.hc_err_cmd_seq_timeout.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3CBase.INTR_STATUS.hc_err_cmd_seq_timeout.value & ~(decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.INTR_STATUS.hc_err_cmd_seq_timeout.next != '0) begin // stickybit
            next_c = field_storage.I3CBase.INTR_STATUS.hc_err_cmd_seq_timeout.value | hwif_in.I3CBase.INTR_STATUS.hc_err_cmd_seq_timeout.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_STATUS.hc_err_cmd_seq_timeout.next = next_c;
        field_combo.I3CBase.INTR_STATUS.hc_err_cmd_seq_timeout.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.INTR_STATUS.hc_err_cmd_seq_timeout.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_STATUS.hc_err_cmd_seq_timeout.load_next) begin
            field_storage.I3CBase.INTR_STATUS.hc_err_cmd_seq_timeout.value <= field_combo.I3CBase.INTR_STATUS.hc_err_cmd_seq_timeout.next;
        end
    end
    // Field: I3CCSR.I3CBase.INTR_STATUS.sched_cmd_missed_tick
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_STATUS.sched_cmd_missed_tick.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3CBase.INTR_STATUS.sched_cmd_missed_tick.value & ~(decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.INTR_STATUS.sched_cmd_missed_tick.next != '0) begin // stickybit
            next_c = field_storage.I3CBase.INTR_STATUS.sched_cmd_missed_tick.value | hwif_in.I3CBase.INTR_STATUS.sched_cmd_missed_tick.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_STATUS.sched_cmd_missed_tick.next = next_c;
        field_combo.I3CBase.INTR_STATUS.sched_cmd_missed_tick.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.INTR_STATUS.sched_cmd_missed_tick.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_STATUS.sched_cmd_missed_tick.load_next) begin
            field_storage.I3CBase.INTR_STATUS.sched_cmd_missed_tick.value <= field_combo.I3CBase.INTR_STATUS.sched_cmd_missed_tick.next;
        end
    end
    assign hwif_out.I3CBase.INTR_STATUS.intr =
        |(field_storage.I3CBase.INTR_STATUS.hc_internal_err.value & field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_internal_err_intr_en.value)
        || |(field_storage.I3CBase.INTR_STATUS.hc_seq_cancel_stat.value & field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_seq_cancel_stat_intr_en.value)
        || |(field_storage.I3CBase.INTR_STATUS.hc_warn_cmd_seq_stall.value & field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_warn_cmd_seq_stall_intr_en.value)
        || |(field_storage.I3CBase.INTR_STATUS.hc_err_cmd_seq_timeout.value & field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_err_cmd_seq_timeout_intr_en.value)
        || |(field_storage.I3CBase.INTR_STATUS.sched_cmd_missed_tick.value & field_storage.I3CBase.INTR_SIGNAL_ENABLE.sched_cmd_missed_tick_intr_en.value);
    // Field: I3CCSR.I3CBase.INTR_STATUS_ENABLE.hc_internal_err_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_STATUS_ENABLE.hc_internal_err_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_STATUS_ENABLE.hc_internal_err_en.value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_STATUS_ENABLE.hc_internal_err_en.next = next_c;
        field_combo.I3CBase.INTR_STATUS_ENABLE.hc_internal_err_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.INTR_STATUS_ENABLE.hc_internal_err_en.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_STATUS_ENABLE.hc_internal_err_en.load_next) begin
            field_storage.I3CBase.INTR_STATUS_ENABLE.hc_internal_err_en.value <= field_combo.I3CBase.INTR_STATUS_ENABLE.hc_internal_err_en.next;
        end
    end
    assign hwif_out.I3CBase.INTR_STATUS_ENABLE.hc_internal_err_en.value = field_storage.I3CBase.INTR_STATUS_ENABLE.hc_internal_err_en.value;
    // Field: I3CCSR.I3CBase.INTR_STATUS_ENABLE.hc_seq_cancel_stat_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_STATUS_ENABLE.hc_seq_cancel_stat_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_STATUS_ENABLE.hc_seq_cancel_stat_en.value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_STATUS_ENABLE.hc_seq_cancel_stat_en.next = next_c;
        field_combo.I3CBase.INTR_STATUS_ENABLE.hc_seq_cancel_stat_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.INTR_STATUS_ENABLE.hc_seq_cancel_stat_en.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_STATUS_ENABLE.hc_seq_cancel_stat_en.load_next) begin
            field_storage.I3CBase.INTR_STATUS_ENABLE.hc_seq_cancel_stat_en.value <= field_combo.I3CBase.INTR_STATUS_ENABLE.hc_seq_cancel_stat_en.next;
        end
    end
    assign hwif_out.I3CBase.INTR_STATUS_ENABLE.hc_seq_cancel_stat_en.value = field_storage.I3CBase.INTR_STATUS_ENABLE.hc_seq_cancel_stat_en.value;
    // Field: I3CCSR.I3CBase.INTR_STATUS_ENABLE.hc_warn_cmd_seq_stall_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_STATUS_ENABLE.hc_warn_cmd_seq_stall_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_STATUS_ENABLE.hc_warn_cmd_seq_stall_en.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_STATUS_ENABLE.hc_warn_cmd_seq_stall_en.next = next_c;
        field_combo.I3CBase.INTR_STATUS_ENABLE.hc_warn_cmd_seq_stall_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.INTR_STATUS_ENABLE.hc_warn_cmd_seq_stall_en.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_STATUS_ENABLE.hc_warn_cmd_seq_stall_en.load_next) begin
            field_storage.I3CBase.INTR_STATUS_ENABLE.hc_warn_cmd_seq_stall_en.value <= field_combo.I3CBase.INTR_STATUS_ENABLE.hc_warn_cmd_seq_stall_en.next;
        end
    end
    assign hwif_out.I3CBase.INTR_STATUS_ENABLE.hc_warn_cmd_seq_stall_en.value = field_storage.I3CBase.INTR_STATUS_ENABLE.hc_warn_cmd_seq_stall_en.value;
    // Field: I3CCSR.I3CBase.INTR_STATUS_ENABLE.hc_err_cmd_seq_timeout_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_STATUS_ENABLE.hc_err_cmd_seq_timeout_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_STATUS_ENABLE.hc_err_cmd_seq_timeout_en.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_STATUS_ENABLE.hc_err_cmd_seq_timeout_en.next = next_c;
        field_combo.I3CBase.INTR_STATUS_ENABLE.hc_err_cmd_seq_timeout_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.INTR_STATUS_ENABLE.hc_err_cmd_seq_timeout_en.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_STATUS_ENABLE.hc_err_cmd_seq_timeout_en.load_next) begin
            field_storage.I3CBase.INTR_STATUS_ENABLE.hc_err_cmd_seq_timeout_en.value <= field_combo.I3CBase.INTR_STATUS_ENABLE.hc_err_cmd_seq_timeout_en.next;
        end
    end
    assign hwif_out.I3CBase.INTR_STATUS_ENABLE.hc_err_cmd_seq_timeout_en.value = field_storage.I3CBase.INTR_STATUS_ENABLE.hc_err_cmd_seq_timeout_en.value;
    // Field: I3CCSR.I3CBase.INTR_STATUS_ENABLE.sched_cmd_missed_tick_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_STATUS_ENABLE.sched_cmd_missed_tick_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_STATUS_ENABLE.sched_cmd_missed_tick_en.value & ~decoded_wr_biten[14:14]) | (decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_STATUS_ENABLE.sched_cmd_missed_tick_en.next = next_c;
        field_combo.I3CBase.INTR_STATUS_ENABLE.sched_cmd_missed_tick_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.INTR_STATUS_ENABLE.sched_cmd_missed_tick_en.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_STATUS_ENABLE.sched_cmd_missed_tick_en.load_next) begin
            field_storage.I3CBase.INTR_STATUS_ENABLE.sched_cmd_missed_tick_en.value <= field_combo.I3CBase.INTR_STATUS_ENABLE.sched_cmd_missed_tick_en.next;
        end
    end
    assign hwif_out.I3CBase.INTR_STATUS_ENABLE.sched_cmd_missed_tick_en.value = field_storage.I3CBase.INTR_STATUS_ENABLE.sched_cmd_missed_tick_en.value;
    // Field: I3CCSR.I3CBase.INTR_SIGNAL_ENABLE.hc_internal_err_intr_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_internal_err_intr_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_internal_err_intr_en.value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_SIGNAL_ENABLE.hc_internal_err_intr_en.next = next_c;
        field_combo.I3CBase.INTR_SIGNAL_ENABLE.hc_internal_err_intr_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_internal_err_intr_en.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_SIGNAL_ENABLE.hc_internal_err_intr_en.load_next) begin
            field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_internal_err_intr_en.value <= field_combo.I3CBase.INTR_SIGNAL_ENABLE.hc_internal_err_intr_en.next;
        end
    end
    assign hwif_out.I3CBase.INTR_SIGNAL_ENABLE.hc_internal_err_intr_en.value = field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_internal_err_intr_en.value;
    // Field: I3CCSR.I3CBase.INTR_SIGNAL_ENABLE.hc_seq_cancel_stat_intr_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_seq_cancel_stat_intr_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_seq_cancel_stat_intr_en.value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_SIGNAL_ENABLE.hc_seq_cancel_stat_intr_en.next = next_c;
        field_combo.I3CBase.INTR_SIGNAL_ENABLE.hc_seq_cancel_stat_intr_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_seq_cancel_stat_intr_en.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_SIGNAL_ENABLE.hc_seq_cancel_stat_intr_en.load_next) begin
            field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_seq_cancel_stat_intr_en.value <= field_combo.I3CBase.INTR_SIGNAL_ENABLE.hc_seq_cancel_stat_intr_en.next;
        end
    end
    assign hwif_out.I3CBase.INTR_SIGNAL_ENABLE.hc_seq_cancel_stat_intr_en.value = field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_seq_cancel_stat_intr_en.value;
    // Field: I3CCSR.I3CBase.INTR_SIGNAL_ENABLE.hc_warn_cmd_seq_stall_intr_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_warn_cmd_seq_stall_intr_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_warn_cmd_seq_stall_intr_en.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_SIGNAL_ENABLE.hc_warn_cmd_seq_stall_intr_en.next = next_c;
        field_combo.I3CBase.INTR_SIGNAL_ENABLE.hc_warn_cmd_seq_stall_intr_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_warn_cmd_seq_stall_intr_en.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_SIGNAL_ENABLE.hc_warn_cmd_seq_stall_intr_en.load_next) begin
            field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_warn_cmd_seq_stall_intr_en.value <= field_combo.I3CBase.INTR_SIGNAL_ENABLE.hc_warn_cmd_seq_stall_intr_en.next;
        end
    end
    assign hwif_out.I3CBase.INTR_SIGNAL_ENABLE.hc_warn_cmd_seq_stall_intr_en.value = field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_warn_cmd_seq_stall_intr_en.value;
    // Field: I3CCSR.I3CBase.INTR_SIGNAL_ENABLE.hc_err_cmd_seq_timeout_intr_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_err_cmd_seq_timeout_intr_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_err_cmd_seq_timeout_intr_en.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_SIGNAL_ENABLE.hc_err_cmd_seq_timeout_intr_en.next = next_c;
        field_combo.I3CBase.INTR_SIGNAL_ENABLE.hc_err_cmd_seq_timeout_intr_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_err_cmd_seq_timeout_intr_en.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_SIGNAL_ENABLE.hc_err_cmd_seq_timeout_intr_en.load_next) begin
            field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_err_cmd_seq_timeout_intr_en.value <= field_combo.I3CBase.INTR_SIGNAL_ENABLE.hc_err_cmd_seq_timeout_intr_en.next;
        end
    end
    assign hwif_out.I3CBase.INTR_SIGNAL_ENABLE.hc_err_cmd_seq_timeout_intr_en.value = field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_err_cmd_seq_timeout_intr_en.value;
    // Field: I3CCSR.I3CBase.INTR_SIGNAL_ENABLE.sched_cmd_missed_tick_intr_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_SIGNAL_ENABLE.sched_cmd_missed_tick_intr_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_SIGNAL_ENABLE.sched_cmd_missed_tick_intr_en.value & ~decoded_wr_biten[14:14]) | (decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_SIGNAL_ENABLE.sched_cmd_missed_tick_intr_en.next = next_c;
        field_combo.I3CBase.INTR_SIGNAL_ENABLE.sched_cmd_missed_tick_intr_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.INTR_SIGNAL_ENABLE.sched_cmd_missed_tick_intr_en.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_SIGNAL_ENABLE.sched_cmd_missed_tick_intr_en.load_next) begin
            field_storage.I3CBase.INTR_SIGNAL_ENABLE.sched_cmd_missed_tick_intr_en.value <= field_combo.I3CBase.INTR_SIGNAL_ENABLE.sched_cmd_missed_tick_intr_en.next;
        end
    end
    assign hwif_out.I3CBase.INTR_SIGNAL_ENABLE.sched_cmd_missed_tick_intr_en.value = field_storage.I3CBase.INTR_SIGNAL_ENABLE.sched_cmd_missed_tick_intr_en.value;
    // Field: I3CCSR.I3CBase.INTR_FORCE.force_hc_internal_err
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_FORCE.force_hc_internal_err.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_FORCE.force_hc_internal_err.value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_FORCE.force_hc_internal_err.next = next_c;
        field_combo.I3CBase.INTR_FORCE.force_hc_internal_err.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.INTR_FORCE.force_hc_internal_err.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_FORCE.force_hc_internal_err.load_next) begin
            field_storage.I3CBase.INTR_FORCE.force_hc_internal_err.value <= field_combo.I3CBase.INTR_FORCE.force_hc_internal_err.next;
        end
    end
    assign hwif_out.I3CBase.INTR_FORCE.force_hc_internal_err.value = field_storage.I3CBase.INTR_FORCE.force_hc_internal_err.value;
    // Field: I3CCSR.I3CBase.INTR_FORCE.force_hc_seq_cancel_stat
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_FORCE.force_hc_seq_cancel_stat.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_FORCE.force_hc_seq_cancel_stat.value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_FORCE.force_hc_seq_cancel_stat.next = next_c;
        field_combo.I3CBase.INTR_FORCE.force_hc_seq_cancel_stat.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.INTR_FORCE.force_hc_seq_cancel_stat.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_FORCE.force_hc_seq_cancel_stat.load_next) begin
            field_storage.I3CBase.INTR_FORCE.force_hc_seq_cancel_stat.value <= field_combo.I3CBase.INTR_FORCE.force_hc_seq_cancel_stat.next;
        end
    end
    assign hwif_out.I3CBase.INTR_FORCE.force_hc_seq_cancel_stat.value = field_storage.I3CBase.INTR_FORCE.force_hc_seq_cancel_stat.value;
    // Field: I3CCSR.I3CBase.INTR_FORCE.force_hc_warn_cmd_seq_stall
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_FORCE.force_hc_warn_cmd_seq_stall.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_FORCE.force_hc_warn_cmd_seq_stall.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_FORCE.force_hc_warn_cmd_seq_stall.next = next_c;
        field_combo.I3CBase.INTR_FORCE.force_hc_warn_cmd_seq_stall.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.INTR_FORCE.force_hc_warn_cmd_seq_stall.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_FORCE.force_hc_warn_cmd_seq_stall.load_next) begin
            field_storage.I3CBase.INTR_FORCE.force_hc_warn_cmd_seq_stall.value <= field_combo.I3CBase.INTR_FORCE.force_hc_warn_cmd_seq_stall.next;
        end
    end
    assign hwif_out.I3CBase.INTR_FORCE.force_hc_warn_cmd_seq_stall.value = field_storage.I3CBase.INTR_FORCE.force_hc_warn_cmd_seq_stall.value;
    // Field: I3CCSR.I3CBase.INTR_FORCE.force_hc_err_cmd_seq_timeout
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_FORCE.force_hc_err_cmd_seq_timeout.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_FORCE.force_hc_err_cmd_seq_timeout.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_FORCE.force_hc_err_cmd_seq_timeout.next = next_c;
        field_combo.I3CBase.INTR_FORCE.force_hc_err_cmd_seq_timeout.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.INTR_FORCE.force_hc_err_cmd_seq_timeout.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_FORCE.force_hc_err_cmd_seq_timeout.load_next) begin
            field_storage.I3CBase.INTR_FORCE.force_hc_err_cmd_seq_timeout.value <= field_combo.I3CBase.INTR_FORCE.force_hc_err_cmd_seq_timeout.next;
        end
    end
    assign hwif_out.I3CBase.INTR_FORCE.force_hc_err_cmd_seq_timeout.value = field_storage.I3CBase.INTR_FORCE.force_hc_err_cmd_seq_timeout.value;
    // Field: I3CCSR.I3CBase.INTR_FORCE.force_sched_cmd_missed_tick
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_FORCE.force_sched_cmd_missed_tick.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_FORCE.force_sched_cmd_missed_tick.value & ~decoded_wr_biten[14:14]) | (decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_FORCE.force_sched_cmd_missed_tick.next = next_c;
        field_combo.I3CBase.INTR_FORCE.force_sched_cmd_missed_tick.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.INTR_FORCE.force_sched_cmd_missed_tick.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_FORCE.force_sched_cmd_missed_tick.load_next) begin
            field_storage.I3CBase.INTR_FORCE.force_sched_cmd_missed_tick.value <= field_combo.I3CBase.INTR_FORCE.force_sched_cmd_missed_tick.next;
        end
    end
    assign hwif_out.I3CBase.INTR_FORCE.force_sched_cmd_missed_tick.value = field_storage.I3CBase.INTR_FORCE.force_sched_cmd_missed_tick.value;
    // Field: I3CCSR.I3CBase.DCT_SECTION_OFFSET.table_idx
    always_comb begin
        automatic logic [4:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.DCT_SECTION_OFFSET.table_idx.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.DCT_SECTION_OFFSET && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.DCT_SECTION_OFFSET.table_idx.value & ~decoded_wr_biten[23:19]) | (decoded_wr_data[23:19] & decoded_wr_biten[23:19]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3CBase.DCT_SECTION_OFFSET.table_idx.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.DCT_SECTION_OFFSET.table_idx.next = next_c;
        field_combo.I3CBase.DCT_SECTION_OFFSET.table_idx.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.DCT_SECTION_OFFSET.table_idx.value <= 5'h0;
        end else if(field_combo.I3CBase.DCT_SECTION_OFFSET.table_idx.load_next) begin
            field_storage.I3CBase.DCT_SECTION_OFFSET.table_idx.value <= field_combo.I3CBase.DCT_SECTION_OFFSET.table_idx.next;
        end
    end
    assign hwif_out.I3CBase.DCT_SECTION_OFFSET.table_idx.value = field_storage.I3CBase.DCT_SECTION_OFFSET.table_idx.value;
    // Field: I3CCSR.I3CBase.IBI_NOTIFY_CTRL.hj_rejected
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.IBI_NOTIFY_CTRL.hj_rejected.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.IBI_NOTIFY_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.IBI_NOTIFY_CTRL.hj_rejected.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.I3CBase.IBI_NOTIFY_CTRL.hj_rejected.next = next_c;
        field_combo.I3CBase.IBI_NOTIFY_CTRL.hj_rejected.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.IBI_NOTIFY_CTRL.hj_rejected.value <= 1'h0;
        end else if(field_combo.I3CBase.IBI_NOTIFY_CTRL.hj_rejected.load_next) begin
            field_storage.I3CBase.IBI_NOTIFY_CTRL.hj_rejected.value <= field_combo.I3CBase.IBI_NOTIFY_CTRL.hj_rejected.next;
        end
    end
    assign hwif_out.I3CBase.IBI_NOTIFY_CTRL.hj_rejected.value = field_storage.I3CBase.IBI_NOTIFY_CTRL.hj_rejected.value;
    // Field: I3CCSR.I3CBase.IBI_NOTIFY_CTRL.crr_rejected
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.IBI_NOTIFY_CTRL.crr_rejected.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.IBI_NOTIFY_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.IBI_NOTIFY_CTRL.crr_rejected.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.I3CBase.IBI_NOTIFY_CTRL.crr_rejected.next = next_c;
        field_combo.I3CBase.IBI_NOTIFY_CTRL.crr_rejected.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.IBI_NOTIFY_CTRL.crr_rejected.value <= 1'h0;
        end else if(field_combo.I3CBase.IBI_NOTIFY_CTRL.crr_rejected.load_next) begin
            field_storage.I3CBase.IBI_NOTIFY_CTRL.crr_rejected.value <= field_combo.I3CBase.IBI_NOTIFY_CTRL.crr_rejected.next;
        end
    end
    assign hwif_out.I3CBase.IBI_NOTIFY_CTRL.crr_rejected.value = field_storage.I3CBase.IBI_NOTIFY_CTRL.crr_rejected.value;
    // Field: I3CCSR.I3CBase.IBI_NOTIFY_CTRL.ibi_rejected
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.IBI_NOTIFY_CTRL.ibi_rejected.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.IBI_NOTIFY_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.IBI_NOTIFY_CTRL.ibi_rejected.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.I3CBase.IBI_NOTIFY_CTRL.ibi_rejected.next = next_c;
        field_combo.I3CBase.IBI_NOTIFY_CTRL.ibi_rejected.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.IBI_NOTIFY_CTRL.ibi_rejected.value <= 1'h0;
        end else if(field_combo.I3CBase.IBI_NOTIFY_CTRL.ibi_rejected.load_next) begin
            field_storage.I3CBase.IBI_NOTIFY_CTRL.ibi_rejected.value <= field_combo.I3CBase.IBI_NOTIFY_CTRL.ibi_rejected.next;
        end
    end
    assign hwif_out.I3CBase.IBI_NOTIFY_CTRL.ibi_rejected.value = field_storage.I3CBase.IBI_NOTIFY_CTRL.ibi_rejected.value;
    // Field: I3CCSR.I3CBase.IBI_DATA_ABORT_CTRL.match_id
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.IBI_DATA_ABORT_CTRL.match_id.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.IBI_DATA_ABORT_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.IBI_DATA_ABORT_CTRL.match_id.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end
        field_combo.I3CBase.IBI_DATA_ABORT_CTRL.match_id.next = next_c;
        field_combo.I3CBase.IBI_DATA_ABORT_CTRL.match_id.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.IBI_DATA_ABORT_CTRL.match_id.value <= 8'h0;
        end else if(field_combo.I3CBase.IBI_DATA_ABORT_CTRL.match_id.load_next) begin
            field_storage.I3CBase.IBI_DATA_ABORT_CTRL.match_id.value <= field_combo.I3CBase.IBI_DATA_ABORT_CTRL.match_id.next;
        end
    end
    assign hwif_out.I3CBase.IBI_DATA_ABORT_CTRL.match_id.value = field_storage.I3CBase.IBI_DATA_ABORT_CTRL.match_id.value;
    // Field: I3CCSR.I3CBase.IBI_DATA_ABORT_CTRL.max_data_length
    always_comb begin
        automatic logic [1:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.IBI_DATA_ABORT_CTRL.max_data_length.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.IBI_DATA_ABORT_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.IBI_DATA_ABORT_CTRL.max_data_length.value & ~decoded_wr_biten[17:16]) | (decoded_wr_data[17:16] & decoded_wr_biten[17:16]);
            load_next_c = '1;
        end
        field_combo.I3CBase.IBI_DATA_ABORT_CTRL.max_data_length.next = next_c;
        field_combo.I3CBase.IBI_DATA_ABORT_CTRL.max_data_length.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.IBI_DATA_ABORT_CTRL.max_data_length.value <= 2'h0;
        end else if(field_combo.I3CBase.IBI_DATA_ABORT_CTRL.max_data_length.load_next) begin
            field_storage.I3CBase.IBI_DATA_ABORT_CTRL.max_data_length.value <= field_combo.I3CBase.IBI_DATA_ABORT_CTRL.max_data_length.next;
        end
    end
    assign hwif_out.I3CBase.IBI_DATA_ABORT_CTRL.max_data_length.value = field_storage.I3CBase.IBI_DATA_ABORT_CTRL.max_data_length.value;
    // Field: I3CCSR.I3CBase.IBI_DATA_ABORT_CTRL.ibi_match_statsus
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.IBI_DATA_ABORT_CTRL.ibi_match_statsus.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.IBI_DATA_ABORT_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.IBI_DATA_ABORT_CTRL.ibi_match_statsus.value & ~decoded_wr_biten[20:18]) | (decoded_wr_data[20:18] & decoded_wr_biten[20:18]);
            load_next_c = '1;
        end
        field_combo.I3CBase.IBI_DATA_ABORT_CTRL.ibi_match_statsus.next = next_c;
        field_combo.I3CBase.IBI_DATA_ABORT_CTRL.ibi_match_statsus.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.IBI_DATA_ABORT_CTRL.ibi_match_statsus.value <= 3'h0;
        end else if(field_combo.I3CBase.IBI_DATA_ABORT_CTRL.ibi_match_statsus.load_next) begin
            field_storage.I3CBase.IBI_DATA_ABORT_CTRL.ibi_match_statsus.value <= field_combo.I3CBase.IBI_DATA_ABORT_CTRL.ibi_match_statsus.next;
        end
    end
    assign hwif_out.I3CBase.IBI_DATA_ABORT_CTRL.ibi_match_statsus.value = field_storage.I3CBase.IBI_DATA_ABORT_CTRL.ibi_match_statsus.value;
    // Field: I3CCSR.I3CBase.IBI_DATA_ABORT_CTRL.data_abort_monitor
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.IBI_DATA_ABORT_CTRL.data_abort_monitor.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.IBI_DATA_ABORT_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.IBI_DATA_ABORT_CTRL.data_abort_monitor.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3CBase.IBI_DATA_ABORT_CTRL.data_abort_monitor.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.IBI_DATA_ABORT_CTRL.data_abort_monitor.next = next_c;
        field_combo.I3CBase.IBI_DATA_ABORT_CTRL.data_abort_monitor.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.IBI_DATA_ABORT_CTRL.data_abort_monitor.value <= 1'h0;
        end else if(field_combo.I3CBase.IBI_DATA_ABORT_CTRL.data_abort_monitor.load_next) begin
            field_storage.I3CBase.IBI_DATA_ABORT_CTRL.data_abort_monitor.value <= field_combo.I3CBase.IBI_DATA_ABORT_CTRL.data_abort_monitor.next;
        end
    end
    assign hwif_out.I3CBase.IBI_DATA_ABORT_CTRL.data_abort_monitor.value = field_storage.I3CBase.IBI_DATA_ABORT_CTRL.data_abort_monitor.value;
    // Field: I3CCSR.I3CBase.DEV_CTX_BASE_LO.base_lo
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.DEV_CTX_BASE_LO.base_lo.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.DEV_CTX_BASE_LO && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.DEV_CTX_BASE_LO.base_lo.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.I3CBase.DEV_CTX_BASE_LO.base_lo.next = next_c;
        field_combo.I3CBase.DEV_CTX_BASE_LO.base_lo.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.DEV_CTX_BASE_LO.base_lo.value <= 1'h0;
        end else if(field_combo.I3CBase.DEV_CTX_BASE_LO.base_lo.load_next) begin
            field_storage.I3CBase.DEV_CTX_BASE_LO.base_lo.value <= field_combo.I3CBase.DEV_CTX_BASE_LO.base_lo.next;
        end
    end
    assign hwif_out.I3CBase.DEV_CTX_BASE_LO.base_lo.value = field_storage.I3CBase.DEV_CTX_BASE_LO.base_lo.value;
    // Field: I3CCSR.I3CBase.DEV_CTX_BASE_HI.base_hi
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.DEV_CTX_BASE_HI.base_hi.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.DEV_CTX_BASE_HI && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.DEV_CTX_BASE_HI.base_hi.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.I3CBase.DEV_CTX_BASE_HI.base_hi.next = next_c;
        field_combo.I3CBase.DEV_CTX_BASE_HI.base_hi.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I3CBase.DEV_CTX_BASE_HI.base_hi.value <= 1'h0;
        end else if(field_combo.I3CBase.DEV_CTX_BASE_HI.base_hi.load_next) begin
            field_storage.I3CBase.DEV_CTX_BASE_HI.base_hi.value <= field_combo.I3CBase.DEV_CTX_BASE_HI.base_hi.next;
        end
    end
    assign hwif_out.I3CBase.DEV_CTX_BASE_HI.base_hi.value = field_storage.I3CBase.DEV_CTX_BASE_HI.base_hi.value;

    assign hwif_out.PIOControl.COMMAND_PORT.req = decoded_req_is_wr ? decoded_reg_strb.PIOControl.COMMAND_PORT : '0;
    assign hwif_out.PIOControl.COMMAND_PORT.req_is_wr = decoded_req_is_wr;
    assign hwif_out.PIOControl.COMMAND_PORT.wr_data = decoded_wr_data;
    assign hwif_out.PIOControl.COMMAND_PORT.wr_biten = decoded_wr_biten;

    assign hwif_out.PIOControl.RESPONSE_PORT.req = !decoded_req_is_wr ? decoded_reg_strb.PIOControl.RESPONSE_PORT : '0;
    assign hwif_out.PIOControl.RESPONSE_PORT.req_is_wr = decoded_req_is_wr;

    assign hwif_out.PIOControl.XFER_DATA_PORT.req = decoded_reg_strb.PIOControl.XFER_DATA_PORT;
    assign hwif_out.PIOControl.XFER_DATA_PORT.req_is_wr = decoded_req_is_wr;
    assign hwif_out.PIOControl.XFER_DATA_PORT.wr_data = decoded_wr_data;
    assign hwif_out.PIOControl.XFER_DATA_PORT.wr_biten = decoded_wr_biten;

    assign hwif_out.PIOControl.IBI_PORT.req = !decoded_req_is_wr ? decoded_reg_strb.PIOControl.IBI_PORT : '0;
    assign hwif_out.PIOControl.IBI_PORT.req_is_wr = decoded_req_is_wr;
    // Field: I3CCSR.PIOControl.QUEUE_THLD_CTRL.cmd_empty
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.QUEUE_THLD_CTRL.cmd_empty.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.QUEUE_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.QUEUE_THLD_CTRL.cmd_empty.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo.PIOControl.QUEUE_THLD_CTRL.cmd_empty.next = next_c;
        field_combo.PIOControl.QUEUE_THLD_CTRL.cmd_empty.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.QUEUE_THLD_CTRL.cmd_empty.value <= 8'h1;
        end else if(field_combo.PIOControl.QUEUE_THLD_CTRL.cmd_empty.load_next) begin
            field_storage.PIOControl.QUEUE_THLD_CTRL.cmd_empty.value <= field_combo.PIOControl.QUEUE_THLD_CTRL.cmd_empty.next;
        end
    end
    assign hwif_out.PIOControl.QUEUE_THLD_CTRL.cmd_empty.value = field_storage.PIOControl.QUEUE_THLD_CTRL.cmd_empty.value;
    // Field: I3CCSR.PIOControl.QUEUE_THLD_CTRL.resp_buf
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.QUEUE_THLD_CTRL.resp_buf.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.QUEUE_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.QUEUE_THLD_CTRL.resp_buf.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end
        field_combo.PIOControl.QUEUE_THLD_CTRL.resp_buf.next = next_c;
        field_combo.PIOControl.QUEUE_THLD_CTRL.resp_buf.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.QUEUE_THLD_CTRL.resp_buf.value <= 8'h1;
        end else if(field_combo.PIOControl.QUEUE_THLD_CTRL.resp_buf.load_next) begin
            field_storage.PIOControl.QUEUE_THLD_CTRL.resp_buf.value <= field_combo.PIOControl.QUEUE_THLD_CTRL.resp_buf.next;
        end
    end
    assign hwif_out.PIOControl.QUEUE_THLD_CTRL.resp_buf.value = field_storage.PIOControl.QUEUE_THLD_CTRL.resp_buf.value;
    // Field: I3CCSR.PIOControl.QUEUE_THLD_CTRL.ibi_data_size
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.QUEUE_THLD_CTRL.ibi_data_size.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.QUEUE_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.QUEUE_THLD_CTRL.ibi_data_size.value & ~decoded_wr_biten[23:16]) | (decoded_wr_data[23:16] & decoded_wr_biten[23:16]);
            load_next_c = '1;
        end
        field_combo.PIOControl.QUEUE_THLD_CTRL.ibi_data_size.next = next_c;
        field_combo.PIOControl.QUEUE_THLD_CTRL.ibi_data_size.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.QUEUE_THLD_CTRL.ibi_data_size.value <= 8'h1;
        end else if(field_combo.PIOControl.QUEUE_THLD_CTRL.ibi_data_size.load_next) begin
            field_storage.PIOControl.QUEUE_THLD_CTRL.ibi_data_size.value <= field_combo.PIOControl.QUEUE_THLD_CTRL.ibi_data_size.next;
        end
    end
    assign hwif_out.PIOControl.QUEUE_THLD_CTRL.ibi_data_size.value = field_storage.PIOControl.QUEUE_THLD_CTRL.ibi_data_size.value;
    // Field: I3CCSR.PIOControl.QUEUE_THLD_CTRL.ibi_status
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.QUEUE_THLD_CTRL.ibi_status.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.QUEUE_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.QUEUE_THLD_CTRL.ibi_status.value & ~decoded_wr_biten[31:24]) | (decoded_wr_data[31:24] & decoded_wr_biten[31:24]);
            load_next_c = '1;
        end
        field_combo.PIOControl.QUEUE_THLD_CTRL.ibi_status.next = next_c;
        field_combo.PIOControl.QUEUE_THLD_CTRL.ibi_status.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.QUEUE_THLD_CTRL.ibi_status.value <= 8'h1;
        end else if(field_combo.PIOControl.QUEUE_THLD_CTRL.ibi_status.load_next) begin
            field_storage.PIOControl.QUEUE_THLD_CTRL.ibi_status.value <= field_combo.PIOControl.QUEUE_THLD_CTRL.ibi_status.next;
        end
    end
    assign hwif_out.PIOControl.QUEUE_THLD_CTRL.ibi_status.value = field_storage.PIOControl.QUEUE_THLD_CTRL.ibi_status.value;
    // Field: I3CCSR.PIOControl.DATA_BUFFER_THLD_CTRL.tx_bux
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.tx_bux.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.DATA_BUFFER_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.tx_bux.value & ~decoded_wr_biten[2:0]) | (decoded_wr_data[2:0] & decoded_wr_biten[2:0]);
            load_next_c = '1;
        end
        field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.tx_bux.next = next_c;
        field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.tx_bux.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.tx_bux.value <= 3'h1;
        end else if(field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.tx_bux.load_next) begin
            field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.tx_bux.value <= field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.tx_bux.next;
        end
    end
    assign hwif_out.PIOControl.DATA_BUFFER_THLD_CTRL.tx_bux.value = field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.tx_bux.value;
    // Field: I3CCSR.PIOControl.DATA_BUFFER_THLD_CTRL.rx_buf
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.rx_buf.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.DATA_BUFFER_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.rx_buf.value & ~decoded_wr_biten[10:8]) | (decoded_wr_data[10:8] & decoded_wr_biten[10:8]);
            load_next_c = '1;
        end
        field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.rx_buf.next = next_c;
        field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.rx_buf.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.rx_buf.value <= 3'h1;
        end else if(field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.rx_buf.load_next) begin
            field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.rx_buf.value <= field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.rx_buf.next;
        end
    end
    assign hwif_out.PIOControl.DATA_BUFFER_THLD_CTRL.rx_buf.value = field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.rx_buf.value;
    // Field: I3CCSR.PIOControl.DATA_BUFFER_THLD_CTRL.tx_start_log
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.tx_start_log.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.DATA_BUFFER_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.tx_start_log.value & ~decoded_wr_biten[18:16]) | (decoded_wr_data[18:16] & decoded_wr_biten[18:16]);
            load_next_c = '1;
        end
        field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.tx_start_log.next = next_c;
        field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.tx_start_log.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.tx_start_log.value <= 3'h1;
        end else if(field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.tx_start_log.load_next) begin
            field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.tx_start_log.value <= field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.tx_start_log.next;
        end
    end
    assign hwif_out.PIOControl.DATA_BUFFER_THLD_CTRL.tx_start_log.value = field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.tx_start_log.value;
    // Field: I3CCSR.PIOControl.DATA_BUFFER_THLD_CTRL.rx_start_log
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.rx_start_log.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.DATA_BUFFER_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.rx_start_log.value & ~decoded_wr_biten[26:24]) | (decoded_wr_data[26:24] & decoded_wr_biten[26:24]);
            load_next_c = '1;
        end
        field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.rx_start_log.next = next_c;
        field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.rx_start_log.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.rx_start_log.value <= 3'h1;
        end else if(field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.rx_start_log.load_next) begin
            field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.rx_start_log.value <= field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.rx_start_log.next;
        end
    end
    assign hwif_out.PIOControl.DATA_BUFFER_THLD_CTRL.rx_start_log.value = field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.rx_start_log.value;
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS.tx_threshold
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS.tx_threshold.value;
        load_next_c = '0;
        if(field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.tx_threshold_en.value) begin // HW Write - we
            next_c = hwif_in.PIOControl.PIO_INTR_STATUS.tx_threshold.next;
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS.tx_threshold.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS.tx_threshold.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_STATUS.tx_threshold.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS.tx_threshold.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS.tx_threshold.value <= field_combo.PIOControl.PIO_INTR_STATUS.tx_threshold.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS.rx_threshold
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS.rx_threshold.value;
        load_next_c = '0;
        if(field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.rx_threshold_en.value) begin // HW Write - we
            next_c = hwif_in.PIOControl.PIO_INTR_STATUS.rx_threshold.next;
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS.rx_threshold.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS.rx_threshold.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_STATUS.rx_threshold.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS.rx_threshold.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS.rx_threshold.value <= field_combo.PIOControl.PIO_INTR_STATUS.rx_threshold.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS.ibi_status
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS.ibi_status.value;
        load_next_c = '0;
        if(field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.ibi_status_en.value) begin // HW Write - we
            next_c = hwif_in.PIOControl.PIO_INTR_STATUS.ibi_status.next;
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS.ibi_status.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS.ibi_status.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_STATUS.ibi_status.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS.ibi_status.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS.ibi_status.value <= field_combo.PIOControl.PIO_INTR_STATUS.ibi_status.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS.cmd_queue_ready
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS.cmd_queue_ready.value;
        load_next_c = '0;
        if(field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.cmd_queue_ready_en.value) begin // HW Write - we
            next_c = hwif_in.PIOControl.PIO_INTR_STATUS.cmd_queue_ready.next;
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS.cmd_queue_ready.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS.cmd_queue_ready.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_STATUS.cmd_queue_ready.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS.cmd_queue_ready.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS.cmd_queue_ready.value <= field_combo.PIOControl.PIO_INTR_STATUS.cmd_queue_ready.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS.resp_ready
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS.resp_ready.value;
        load_next_c = '0;
        if(field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.resp_ready_en.value) begin // HW Write - we
            next_c = hwif_in.PIOControl.PIO_INTR_STATUS.resp_ready.next;
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS.resp_ready.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS.resp_ready.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_STATUS.resp_ready.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS.resp_ready.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS.resp_ready.value <= field_combo.PIOControl.PIO_INTR_STATUS.resp_ready.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS.transfer_abort
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS.transfer_abort.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.PIOControl.PIO_INTR_STATUS.transfer_abort.value & ~(decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end else if(hwif_in.PIOControl.PIO_INTR_STATUS.transfer_abort.next != '0) begin // stickybit
            next_c = field_storage.PIOControl.PIO_INTR_STATUS.transfer_abort.value | hwif_in.PIOControl.PIO_INTR_STATUS.transfer_abort.next;
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS.transfer_abort.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS.transfer_abort.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_STATUS.transfer_abort.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS.transfer_abort.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS.transfer_abort.value <= field_combo.PIOControl.PIO_INTR_STATUS.transfer_abort.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS.transfer_err
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS.transfer_err.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.PIOControl.PIO_INTR_STATUS.transfer_err.value & ~(decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end else if(hwif_in.PIOControl.PIO_INTR_STATUS.transfer_err.next != '0) begin // stickybit
            next_c = field_storage.PIOControl.PIO_INTR_STATUS.transfer_err.value | hwif_in.PIOControl.PIO_INTR_STATUS.transfer_err.next;
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS.transfer_err.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS.transfer_err.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_STATUS.transfer_err.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS.transfer_err.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS.transfer_err.value <= field_combo.PIOControl.PIO_INTR_STATUS.transfer_err.next;
        end
    end
    assign hwif_out.PIOControl.PIO_INTR_STATUS.intr =
        |(field_storage.PIOControl.PIO_INTR_STATUS.tx_threshold.value & field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.tx_threshold_intr_en.value)
        || |(field_storage.PIOControl.PIO_INTR_STATUS.rx_threshold.value & field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.rx_threshold_intr_en.value)
        || |(field_storage.PIOControl.PIO_INTR_STATUS.ibi_status.value & field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.ibi_status_intr_en.value)
        || |(field_storage.PIOControl.PIO_INTR_STATUS.cmd_queue_ready.value & field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.cmd_queue_ready_intr_en.value)
        || |(field_storage.PIOControl.PIO_INTR_STATUS.resp_ready.value & field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.resp_ready_intr_en.value)
        || |(field_storage.PIOControl.PIO_INTR_STATUS.transfer_abort.value & field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_abort_intr_en.value)
        || |(field_storage.PIOControl.PIO_INTR_STATUS.transfer_err.value & field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_err_intr_en.value);
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS_ENABLE.tx_threshold_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.tx_threshold_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.tx_threshold_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.tx_threshold_en.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.tx_threshold_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.tx_threshold_en.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.tx_threshold_en.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.tx_threshold_en.value <= field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.tx_threshold_en.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS_ENABLE.rx_threshold_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.rx_threshold_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.rx_threshold_en.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.rx_threshold_en.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.rx_threshold_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.rx_threshold_en.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.rx_threshold_en.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.rx_threshold_en.value <= field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.rx_threshold_en.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS_ENABLE.ibi_status_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.ibi_status_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.ibi_status_en.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.ibi_status_en.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.ibi_status_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.ibi_status_en.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.ibi_status_en.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.ibi_status_en.value <= field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.ibi_status_en.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS_ENABLE.cmd_queue_ready_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.cmd_queue_ready_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.cmd_queue_ready_en.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.cmd_queue_ready_en.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.cmd_queue_ready_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.cmd_queue_ready_en.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.cmd_queue_ready_en.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.cmd_queue_ready_en.value <= field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.cmd_queue_ready_en.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS_ENABLE.resp_ready_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.resp_ready_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.resp_ready_en.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.resp_ready_en.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.resp_ready_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.resp_ready_en.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.resp_ready_en.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.resp_ready_en.value <= field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.resp_ready_en.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS_ENABLE.transfer_abort_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.transfer_abort_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.transfer_abort_en.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.transfer_abort_en.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.transfer_abort_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.transfer_abort_en.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.transfer_abort_en.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.transfer_abort_en.value <= field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.transfer_abort_en.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS_ENABLE.transfer_err_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.transfer_err_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.transfer_err_en.value & ~decoded_wr_biten[9:9]) | (decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.transfer_err_en.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.transfer_err_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.transfer_err_en.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.transfer_err_en.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.transfer_err_en.value <= field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.transfer_err_en.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_SIGNAL_ENABLE.tx_threshold_intr_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.tx_threshold_intr_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.tx_threshold_intr_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.tx_threshold_intr_en.next = next_c;
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.tx_threshold_intr_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.tx_threshold_intr_en.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.tx_threshold_intr_en.load_next) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.tx_threshold_intr_en.value <= field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.tx_threshold_intr_en.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_SIGNAL_ENABLE.rx_threshold_intr_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.rx_threshold_intr_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.rx_threshold_intr_en.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.rx_threshold_intr_en.next = next_c;
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.rx_threshold_intr_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.rx_threshold_intr_en.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.rx_threshold_intr_en.load_next) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.rx_threshold_intr_en.value <= field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.rx_threshold_intr_en.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_SIGNAL_ENABLE.ibi_status_intr_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.ibi_status_intr_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.ibi_status_intr_en.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.ibi_status_intr_en.next = next_c;
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.ibi_status_intr_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.ibi_status_intr_en.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.ibi_status_intr_en.load_next) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.ibi_status_intr_en.value <= field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.ibi_status_intr_en.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_SIGNAL_ENABLE.cmd_queue_ready_intr_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.cmd_queue_ready_intr_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.cmd_queue_ready_intr_en.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.cmd_queue_ready_intr_en.next = next_c;
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.cmd_queue_ready_intr_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.cmd_queue_ready_intr_en.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.cmd_queue_ready_intr_en.load_next) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.cmd_queue_ready_intr_en.value <= field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.cmd_queue_ready_intr_en.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_SIGNAL_ENABLE.resp_ready_intr_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.resp_ready_intr_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.resp_ready_intr_en.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.resp_ready_intr_en.next = next_c;
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.resp_ready_intr_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.resp_ready_intr_en.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.resp_ready_intr_en.load_next) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.resp_ready_intr_en.value <= field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.resp_ready_intr_en.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_abort_intr_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_abort_intr_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_abort_intr_en.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_abort_intr_en.next = next_c;
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_abort_intr_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_abort_intr_en.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_abort_intr_en.load_next) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_abort_intr_en.value <= field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_abort_intr_en.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_err_intr_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_err_intr_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_err_intr_en.value & ~decoded_wr_biten[9:9]) | (decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_err_intr_en.next = next_c;
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_err_intr_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_err_intr_en.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_err_intr_en.load_next) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_err_intr_en.value <= field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_err_intr_en.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_FORCE.force_tx_threshold
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_FORCE.force_tx_threshold.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_FORCE.force_tx_threshold.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_FORCE.force_tx_threshold.next = next_c;
        field_combo.PIOControl.PIO_INTR_FORCE.force_tx_threshold.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_FORCE.force_tx_threshold.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_FORCE.force_tx_threshold.load_next) begin
            field_storage.PIOControl.PIO_INTR_FORCE.force_tx_threshold.value <= field_combo.PIOControl.PIO_INTR_FORCE.force_tx_threshold.next;
        end
    end
    assign hwif_out.PIOControl.PIO_INTR_FORCE.force_tx_threshold.value = field_storage.PIOControl.PIO_INTR_FORCE.force_tx_threshold.value;
    // Field: I3CCSR.PIOControl.PIO_INTR_FORCE.force_rx_threshold
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_FORCE.force_rx_threshold.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_FORCE.force_rx_threshold.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_FORCE.force_rx_threshold.next = next_c;
        field_combo.PIOControl.PIO_INTR_FORCE.force_rx_threshold.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_FORCE.force_rx_threshold.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_FORCE.force_rx_threshold.load_next) begin
            field_storage.PIOControl.PIO_INTR_FORCE.force_rx_threshold.value <= field_combo.PIOControl.PIO_INTR_FORCE.force_rx_threshold.next;
        end
    end
    assign hwif_out.PIOControl.PIO_INTR_FORCE.force_rx_threshold.value = field_storage.PIOControl.PIO_INTR_FORCE.force_rx_threshold.value;
    // Field: I3CCSR.PIOControl.PIO_INTR_FORCE.force_ibi_status
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_FORCE.force_ibi_status.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_FORCE.force_ibi_status.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_FORCE.force_ibi_status.next = next_c;
        field_combo.PIOControl.PIO_INTR_FORCE.force_ibi_status.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_FORCE.force_ibi_status.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_FORCE.force_ibi_status.load_next) begin
            field_storage.PIOControl.PIO_INTR_FORCE.force_ibi_status.value <= field_combo.PIOControl.PIO_INTR_FORCE.force_ibi_status.next;
        end
    end
    assign hwif_out.PIOControl.PIO_INTR_FORCE.force_ibi_status.value = field_storage.PIOControl.PIO_INTR_FORCE.force_ibi_status.value;
    // Field: I3CCSR.PIOControl.PIO_INTR_FORCE.force_cmd_queue_ready
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_FORCE.force_cmd_queue_ready.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_FORCE.force_cmd_queue_ready.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_FORCE.force_cmd_queue_ready.next = next_c;
        field_combo.PIOControl.PIO_INTR_FORCE.force_cmd_queue_ready.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_FORCE.force_cmd_queue_ready.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_FORCE.force_cmd_queue_ready.load_next) begin
            field_storage.PIOControl.PIO_INTR_FORCE.force_cmd_queue_ready.value <= field_combo.PIOControl.PIO_INTR_FORCE.force_cmd_queue_ready.next;
        end
    end
    assign hwif_out.PIOControl.PIO_INTR_FORCE.force_cmd_queue_ready.value = field_storage.PIOControl.PIO_INTR_FORCE.force_cmd_queue_ready.value;
    // Field: I3CCSR.PIOControl.PIO_INTR_FORCE.force_resp_ready
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_FORCE.force_resp_ready.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_FORCE.force_resp_ready.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_FORCE.force_resp_ready.next = next_c;
        field_combo.PIOControl.PIO_INTR_FORCE.force_resp_ready.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_FORCE.force_resp_ready.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_FORCE.force_resp_ready.load_next) begin
            field_storage.PIOControl.PIO_INTR_FORCE.force_resp_ready.value <= field_combo.PIOControl.PIO_INTR_FORCE.force_resp_ready.next;
        end
    end
    assign hwif_out.PIOControl.PIO_INTR_FORCE.force_resp_ready.value = field_storage.PIOControl.PIO_INTR_FORCE.force_resp_ready.value;
    // Field: I3CCSR.PIOControl.PIO_INTR_FORCE.force_transfer_abort
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_FORCE.force_transfer_abort.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_FORCE.force_transfer_abort.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_FORCE.force_transfer_abort.next = next_c;
        field_combo.PIOControl.PIO_INTR_FORCE.force_transfer_abort.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_FORCE.force_transfer_abort.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_FORCE.force_transfer_abort.load_next) begin
            field_storage.PIOControl.PIO_INTR_FORCE.force_transfer_abort.value <= field_combo.PIOControl.PIO_INTR_FORCE.force_transfer_abort.next;
        end
    end
    assign hwif_out.PIOControl.PIO_INTR_FORCE.force_transfer_abort.value = field_storage.PIOControl.PIO_INTR_FORCE.force_transfer_abort.value;
    // Field: I3CCSR.PIOControl.PIO_INTR_FORCE.force_transfer_err
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_FORCE.force_transfer_err.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_FORCE.force_transfer_err.value & ~decoded_wr_biten[9:9]) | (decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_FORCE.force_transfer_err.next = next_c;
        field_combo.PIOControl.PIO_INTR_FORCE.force_transfer_err.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_INTR_FORCE.force_transfer_err.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_FORCE.force_transfer_err.load_next) begin
            field_storage.PIOControl.PIO_INTR_FORCE.force_transfer_err.value <= field_combo.PIOControl.PIO_INTR_FORCE.force_transfer_err.next;
        end
    end
    assign hwif_out.PIOControl.PIO_INTR_FORCE.force_transfer_err.value = field_storage.PIOControl.PIO_INTR_FORCE.force_transfer_err.value;
    // Field: I3CCSR.PIOControl.PIO_CONTROL.enable_req
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_CONTROL.enable_req.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_CONTROL.enable_req.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_CONTROL.enable_req.next = next_c;
        field_combo.PIOControl.PIO_CONTROL.enable_req.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_CONTROL.enable_req.value <= 1'h1;
        end else if(field_combo.PIOControl.PIO_CONTROL.enable_req.load_next) begin
            field_storage.PIOControl.PIO_CONTROL.enable_req.value <= field_combo.PIOControl.PIO_CONTROL.enable_req.next;
        end
    end
    assign hwif_out.PIOControl.PIO_CONTROL.enable_req.value = field_storage.PIOControl.PIO_CONTROL.enable_req.value;
    // Field: I3CCSR.PIOControl.PIO_CONTROL.rs_req
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_CONTROL.rs_req.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_CONTROL.rs_req.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.PIOControl.PIO_CONTROL.rs_req.next;
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_CONTROL.rs_req.next = next_c;
        field_combo.PIOControl.PIO_CONTROL.rs_req.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_CONTROL.rs_req.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_CONTROL.rs_req.load_next) begin
            field_storage.PIOControl.PIO_CONTROL.rs_req.value <= field_combo.PIOControl.PIO_CONTROL.rs_req.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_CONTROL.abort_req
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_CONTROL.abort_req.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_CONTROL.abort_req.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_CONTROL.abort_req.next = next_c;
        field_combo.PIOControl.PIO_CONTROL.abort_req.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.PIOControl.PIO_CONTROL.abort_req.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_CONTROL.abort_req.load_next) begin
            field_storage.PIOControl.PIO_CONTROL.abort_req.value <= field_combo.PIOControl.PIO_CONTROL.abort_req.next;
        end
    end
    assign hwif_out.PIOControl.PIO_CONTROL.abort_req.value = field_storage.PIOControl.PIO_CONTROL.abort_req.value;
    assign hwif_out.DAT.req = decoded_reg_strb.DAT;
    assign hwif_out.DAT.addr = decoded_addr[10:0];
    assign hwif_out.DAT.req_is_wr = decoded_req_is_wr;
    assign hwif_out.DAT.wr_data = decoded_wr_data;
    assign hwif_out.DAT.wr_biten = decoded_wr_biten;
    assign hwif_out.DCT.req = decoded_reg_strb.DCT;
    assign hwif_out.DCT.addr = decoded_addr[11:0];
    assign hwif_out.DCT.req_is_wr = decoded_req_is_wr;
    assign hwif_out.DCT.wr_data = decoded_wr_data;
    assign hwif_out.DCT.wr_biten = decoded_wr_biten;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    always_comb begin
        automatic logic wr_ack;
        wr_ack = '0;
        wr_ack |= hwif_in.PIOControl.COMMAND_PORT.wr_ack;
        wr_ack |= hwif_in.PIOControl.XFER_DATA_PORT.wr_ack;
        wr_ack |= hwif_in.DAT.wr_ack;
        wr_ack |= hwif_in.DCT.wr_ack;
        external_wr_ack = wr_ack;
    end
    assign cpuif_wr_ack = external_wr_ack | (decoded_req & decoded_req_is_wr & ~decoded_strb_is_external);
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_external_rd_ack_c;
    always_comb begin
        automatic logic rd_ack;
        rd_ack = '0;
        rd_ack |= hwif_in.PIOControl.RESPONSE_PORT.rd_ack;
        rd_ack |= hwif_in.PIOControl.XFER_DATA_PORT.rd_ack;
        rd_ack |= hwif_in.PIOControl.IBI_PORT.rd_ack;
        rd_ack |= hwif_in.DAT.rd_ack;
        rd_ack |= hwif_in.DCT.rd_ack;
        readback_external_rd_ack_c = rd_ack;
    end

    logic readback_external_rd_ack;

    assign readback_external_rd_ack = readback_external_rd_ack_c;

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[33];
    assign readback_array[0][31:0] = (decoded_reg_strb.I3CBase.HCI_VERSION && !decoded_req_is_wr) ? 32'h120 : '0;
    assign readback_array[1][0:0] = (decoded_reg_strb.I3CBase.HC_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.HC_CONTROL.iba_include.value : '0;
    assign readback_array[1][2:1] = '0;
    assign readback_array[1][3:3] = (decoded_reg_strb.I3CBase.HC_CONTROL && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[1][4:4] = (decoded_reg_strb.I3CBase.HC_CONTROL && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[1][5:5] = '0;
    assign readback_array[1][6:6] = (decoded_reg_strb.I3CBase.HC_CONTROL && !decoded_req_is_wr) ? 1'h1 : '0;
    assign readback_array[1][7:7] = (decoded_reg_strb.I3CBase.HC_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.HC_CONTROL.i2c_devs.value : '0;
    assign readback_array[1][8:8] = (decoded_reg_strb.I3CBase.HC_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.HC_CONTROL.hot_join.value : '0;
    assign readback_array[1][11:9] = '0;
    assign readback_array[1][12:12] = (decoded_reg_strb.I3CBase.HC_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.HC_CONTROL.halt_on_cmd_seq_timeout.value : '0;
    assign readback_array[1][28:13] = '0;
    assign readback_array[1][29:29] = (decoded_reg_strb.I3CBase.HC_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.HC_CONTROL.abort.value : '0;
    assign readback_array[1][30:30] = (decoded_reg_strb.I3CBase.HC_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.HC_CONTROL.resume.value : '0;
    assign readback_array[1][31:31] = (decoded_reg_strb.I3CBase.HC_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.HC_CONTROL.bus_enable.value : '0;
    assign readback_array[2][15:0] = '0;
    assign readback_array[2][22:16] = (decoded_reg_strb.I3CBase.CONTROLLER_DEVICE_ADDR && !decoded_req_is_wr) ? field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr.value : '0;
    assign readback_array[2][30:23] = '0;
    assign readback_array[2][31:31] = (decoded_reg_strb.I3CBase.CONTROLLER_DEVICE_ADDR && !decoded_req_is_wr) ? field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.dynamic_addr_valid.value : '0;
    assign readback_array[3][1:0] = '0;
    assign readback_array[3][2:2] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][3:3] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][4:4] = '0;
    assign readback_array[3][5:5] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][6:6] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][7:7] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][9:8] = '0;
    assign readback_array[3][10:10] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h1 : '0;
    assign readback_array[3][11:11] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][12:12] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][13:13] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][19:14] = '0;
    assign readback_array[3][21:20] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 2'h0 : '0;
    assign readback_array[3][27:22] = '0;
    assign readback_array[3][28:28] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][29:29] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][30:30] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][31:31] = '0;
    assign readback_array[4][0:0] = (decoded_reg_strb.I3CBase.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.RESET_CONTROL.soft_rst.value : '0;
    assign readback_array[4][1:1] = (decoded_reg_strb.I3CBase.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.RESET_CONTROL.cmd_queue.value : '0;
    assign readback_array[4][2:2] = (decoded_reg_strb.I3CBase.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.RESET_CONTROL.resp_queue.value : '0;
    assign readback_array[4][3:3] = (decoded_reg_strb.I3CBase.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.RESET_CONTROL.tx_fifo.value : '0;
    assign readback_array[4][4:4] = (decoded_reg_strb.I3CBase.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.RESET_CONTROL.rx_fifo.value : '0;
    assign readback_array[4][5:5] = (decoded_reg_strb.I3CBase.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.RESET_CONTROL.ibi_queue.value : '0;
    assign readback_array[4][31:6] = '0;
    assign readback_array[5][1:0] = '0;
    assign readback_array[5][2:2] = (decoded_reg_strb.I3CBase.PRESENT_STATE && !decoded_req_is_wr) ? hwif_in.I3CBase.PRESENT_STATE.ac_current_own.next : '0;
    assign readback_array[5][31:3] = '0;
    assign readback_array[6][9:0] = '0;
    assign readback_array[6][10:10] = (decoded_reg_strb.I3CBase.INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_STATUS.hc_internal_err.value : '0;
    assign readback_array[6][11:11] = (decoded_reg_strb.I3CBase.INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_STATUS.hc_seq_cancel_stat.value : '0;
    assign readback_array[6][12:12] = (decoded_reg_strb.I3CBase.INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_STATUS.hc_warn_cmd_seq_stall.value : '0;
    assign readback_array[6][13:13] = (decoded_reg_strb.I3CBase.INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_STATUS.hc_err_cmd_seq_timeout.value : '0;
    assign readback_array[6][14:14] = (decoded_reg_strb.I3CBase.INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_STATUS.sched_cmd_missed_tick.value : '0;
    assign readback_array[6][31:15] = '0;
    assign readback_array[7][9:0] = '0;
    assign readback_array[7][10:10] = (decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_STATUS_ENABLE.hc_internal_err_en.value : '0;
    assign readback_array[7][11:11] = (decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_STATUS_ENABLE.hc_seq_cancel_stat_en.value : '0;
    assign readback_array[7][12:12] = (decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_STATUS_ENABLE.hc_warn_cmd_seq_stall_en.value : '0;
    assign readback_array[7][13:13] = (decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_STATUS_ENABLE.hc_err_cmd_seq_timeout_en.value : '0;
    assign readback_array[7][14:14] = (decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_STATUS_ENABLE.sched_cmd_missed_tick_en.value : '0;
    assign readback_array[7][31:15] = '0;
    assign readback_array[8][9:0] = '0;
    assign readback_array[8][10:10] = (decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_internal_err_intr_en.value : '0;
    assign readback_array[8][11:11] = (decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_seq_cancel_stat_intr_en.value : '0;
    assign readback_array[8][12:12] = (decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_warn_cmd_seq_stall_intr_en.value : '0;
    assign readback_array[8][13:13] = (decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_SIGNAL_ENABLE.hc_err_cmd_seq_timeout_intr_en.value : '0;
    assign readback_array[8][14:14] = (decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_SIGNAL_ENABLE.sched_cmd_missed_tick_intr_en.value : '0;
    assign readback_array[8][31:15] = '0;
    assign readback_array[9][11:0] = (decoded_reg_strb.I3CBase.DAT_SECTION_OFFSET && !decoded_req_is_wr) ? 12'h400 : '0;
    assign readback_array[9][18:12] = (decoded_reg_strb.I3CBase.DAT_SECTION_OFFSET && !decoded_req_is_wr) ? 7'h7f : '0;
    assign readback_array[9][27:19] = '0;
    assign readback_array[9][31:28] = (decoded_reg_strb.I3CBase.DAT_SECTION_OFFSET && !decoded_req_is_wr) ? 4'h0 : '0;
    assign readback_array[10][11:0] = (decoded_reg_strb.I3CBase.DCT_SECTION_OFFSET && !decoded_req_is_wr) ? 12'h800 : '0;
    assign readback_array[10][18:12] = (decoded_reg_strb.I3CBase.DCT_SECTION_OFFSET && !decoded_req_is_wr) ? 7'h7f : '0;
    assign readback_array[10][23:19] = (decoded_reg_strb.I3CBase.DCT_SECTION_OFFSET && !decoded_req_is_wr) ? field_storage.I3CBase.DCT_SECTION_OFFSET.table_idx.value : '0;
    assign readback_array[10][27:24] = '0;
    assign readback_array[10][31:28] = (decoded_reg_strb.I3CBase.DCT_SECTION_OFFSET && !decoded_req_is_wr) ? 4'h0 : '0;
    assign readback_array[11][15:0] = (decoded_reg_strb.I3CBase.RING_HEADERS_SECTION_OFFSET && !decoded_req_is_wr) ? 16'h0 : '0;
    assign readback_array[11][31:16] = '0;
    assign readback_array[12][15:0] = (decoded_reg_strb.I3CBase.PIO_SECTION_OFFSET && !decoded_req_is_wr) ? 16'h100 : '0;
    assign readback_array[12][31:16] = '0;
    assign readback_array[13][15:0] = (decoded_reg_strb.I3CBase.EXT_CAPS_SECTION_OFFSET && !decoded_req_is_wr) ? 16'h0 : '0;
    assign readback_array[13][31:16] = '0;
    assign readback_array[14][0:0] = (decoded_reg_strb.I3CBase.INT_CTRL_CMDS_EN && !decoded_req_is_wr) ? 1'h1 : '0;
    assign readback_array[14][15:1] = (decoded_reg_strb.I3CBase.INT_CTRL_CMDS_EN && !decoded_req_is_wr) ? 15'h35 : '0;
    assign readback_array[14][31:16] = '0;
    assign readback_array[15][0:0] = (decoded_reg_strb.I3CBase.IBI_NOTIFY_CTRL && !decoded_req_is_wr) ? field_storage.I3CBase.IBI_NOTIFY_CTRL.hj_rejected.value : '0;
    assign readback_array[15][1:1] = (decoded_reg_strb.I3CBase.IBI_NOTIFY_CTRL && !decoded_req_is_wr) ? field_storage.I3CBase.IBI_NOTIFY_CTRL.crr_rejected.value : '0;
    assign readback_array[15][2:2] = '0;
    assign readback_array[15][3:3] = (decoded_reg_strb.I3CBase.IBI_NOTIFY_CTRL && !decoded_req_is_wr) ? field_storage.I3CBase.IBI_NOTIFY_CTRL.ibi_rejected.value : '0;
    assign readback_array[15][31:4] = '0;
    assign readback_array[16][7:0] = '0;
    assign readback_array[16][15:8] = (decoded_reg_strb.I3CBase.IBI_DATA_ABORT_CTRL && !decoded_req_is_wr) ? field_storage.I3CBase.IBI_DATA_ABORT_CTRL.match_id.value : '0;
    assign readback_array[16][17:16] = (decoded_reg_strb.I3CBase.IBI_DATA_ABORT_CTRL && !decoded_req_is_wr) ? field_storage.I3CBase.IBI_DATA_ABORT_CTRL.max_data_length.value : '0;
    assign readback_array[16][20:18] = (decoded_reg_strb.I3CBase.IBI_DATA_ABORT_CTRL && !decoded_req_is_wr) ? field_storage.I3CBase.IBI_DATA_ABORT_CTRL.ibi_match_statsus.value : '0;
    assign readback_array[16][30:21] = '0;
    assign readback_array[16][31:31] = (decoded_reg_strb.I3CBase.IBI_DATA_ABORT_CTRL && !decoded_req_is_wr) ? field_storage.I3CBase.IBI_DATA_ABORT_CTRL.data_abort_monitor.value : '0;
    assign readback_array[17][0:0] = (decoded_reg_strb.I3CBase.DEV_CTX_BASE_LO && !decoded_req_is_wr) ? field_storage.I3CBase.DEV_CTX_BASE_LO.base_lo.value : '0;
    assign readback_array[17][31:1] = '0;
    assign readback_array[18][0:0] = (decoded_reg_strb.I3CBase.DEV_CTX_BASE_HI && !decoded_req_is_wr) ? field_storage.I3CBase.DEV_CTX_BASE_HI.base_hi.value : '0;
    assign readback_array[18][31:1] = '0;
    assign readback_array[19][15:0] = (decoded_reg_strb.I3CBase.DEV_CTX_SG && !decoded_req_is_wr) ? 16'h0 : '0;
    assign readback_array[19][30:16] = '0;
    assign readback_array[19][31:31] = (decoded_reg_strb.I3CBase.DEV_CTX_SG && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[20] = hwif_in.PIOControl.RESPONSE_PORT.rd_ack ? hwif_in.PIOControl.RESPONSE_PORT.rd_data : '0;
    assign readback_array[21] = hwif_in.PIOControl.XFER_DATA_PORT.rd_ack ? hwif_in.PIOControl.XFER_DATA_PORT.rd_data : '0;
    assign readback_array[22] = hwif_in.PIOControl.IBI_PORT.rd_ack ? hwif_in.PIOControl.IBI_PORT.rd_data : '0;
    assign readback_array[23][7:0] = (decoded_reg_strb.PIOControl.QUEUE_THLD_CTRL && !decoded_req_is_wr) ? field_storage.PIOControl.QUEUE_THLD_CTRL.cmd_empty.value : '0;
    assign readback_array[23][15:8] = (decoded_reg_strb.PIOControl.QUEUE_THLD_CTRL && !decoded_req_is_wr) ? field_storage.PIOControl.QUEUE_THLD_CTRL.resp_buf.value : '0;
    assign readback_array[23][23:16] = (decoded_reg_strb.PIOControl.QUEUE_THLD_CTRL && !decoded_req_is_wr) ? field_storage.PIOControl.QUEUE_THLD_CTRL.ibi_data_size.value : '0;
    assign readback_array[23][31:24] = (decoded_reg_strb.PIOControl.QUEUE_THLD_CTRL && !decoded_req_is_wr) ? field_storage.PIOControl.QUEUE_THLD_CTRL.ibi_status.value : '0;
    assign readback_array[24][2:0] = (decoded_reg_strb.PIOControl.DATA_BUFFER_THLD_CTRL && !decoded_req_is_wr) ? field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.tx_bux.value : '0;
    assign readback_array[24][7:3] = '0;
    assign readback_array[24][10:8] = (decoded_reg_strb.PIOControl.DATA_BUFFER_THLD_CTRL && !decoded_req_is_wr) ? field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.rx_buf.value : '0;
    assign readback_array[24][15:11] = '0;
    assign readback_array[24][18:16] = (decoded_reg_strb.PIOControl.DATA_BUFFER_THLD_CTRL && !decoded_req_is_wr) ? field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.tx_start_log.value : '0;
    assign readback_array[24][23:19] = '0;
    assign readback_array[24][26:24] = (decoded_reg_strb.PIOControl.DATA_BUFFER_THLD_CTRL && !decoded_req_is_wr) ? field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.rx_start_log.value : '0;
    assign readback_array[24][31:27] = '0;
    assign readback_array[25][7:0] = (decoded_reg_strb.PIOControl.QUEUE_SIZE && !decoded_req_is_wr) ? 8'hff : '0;
    assign readback_array[25][15:8] = (decoded_reg_strb.PIOControl.QUEUE_SIZE && !decoded_req_is_wr) ? 8'hff : '0;
    assign readback_array[25][23:16] = (decoded_reg_strb.PIOControl.QUEUE_SIZE && !decoded_req_is_wr) ? 8'h7 : '0;
    assign readback_array[25][31:24] = (decoded_reg_strb.PIOControl.QUEUE_SIZE && !decoded_req_is_wr) ? 8'h7 : '0;
    assign readback_array[26][7:0] = (decoded_reg_strb.PIOControl.ALT_QUEUE_SIZE && !decoded_req_is_wr) ? 8'h0 : '0;
    assign readback_array[26][23:8] = '0;
    assign readback_array[26][24:24] = (decoded_reg_strb.PIOControl.ALT_QUEUE_SIZE && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[26][27:25] = '0;
    assign readback_array[26][28:28] = (decoded_reg_strb.PIOControl.ALT_QUEUE_SIZE && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[26][31:29] = '0;
    assign readback_array[27][0:0] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS.tx_threshold.value : '0;
    assign readback_array[27][1:1] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS.rx_threshold.value : '0;
    assign readback_array[27][2:2] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS.ibi_status.value : '0;
    assign readback_array[27][3:3] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS.cmd_queue_ready.value : '0;
    assign readback_array[27][4:4] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS.resp_ready.value : '0;
    assign readback_array[27][5:5] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS.transfer_abort.value : '0;
    assign readback_array[27][8:6] = '0;
    assign readback_array[27][9:9] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS.transfer_err.value : '0;
    assign readback_array[27][31:10] = '0;
    assign readback_array[28][0:0] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.tx_threshold_en.value : '0;
    assign readback_array[28][1:1] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.rx_threshold_en.value : '0;
    assign readback_array[28][2:2] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.ibi_status_en.value : '0;
    assign readback_array[28][3:3] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.cmd_queue_ready_en.value : '0;
    assign readback_array[28][4:4] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.resp_ready_en.value : '0;
    assign readback_array[28][5:5] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.transfer_abort_en.value : '0;
    assign readback_array[28][8:6] = '0;
    assign readback_array[28][9:9] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.transfer_err_en.value : '0;
    assign readback_array[28][31:10] = '0;
    assign readback_array[29][0:0] = (decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.tx_threshold_intr_en.value : '0;
    assign readback_array[29][1:1] = (decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.rx_threshold_intr_en.value : '0;
    assign readback_array[29][2:2] = (decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.ibi_status_intr_en.value : '0;
    assign readback_array[29][3:3] = (decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.cmd_queue_ready_intr_en.value : '0;
    assign readback_array[29][4:4] = (decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.resp_ready_intr_en.value : '0;
    assign readback_array[29][5:5] = (decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_abort_intr_en.value : '0;
    assign readback_array[29][8:6] = '0;
    assign readback_array[29][9:9] = (decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.transfer_err_intr_en.value : '0;
    assign readback_array[29][31:10] = '0;
    assign readback_array[30][0:0] = (decoded_reg_strb.PIOControl.PIO_CONTROL && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_CONTROL.enable_req.value : '0;
    assign readback_array[30][1:1] = (decoded_reg_strb.PIOControl.PIO_CONTROL && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_CONTROL.rs_req.value : '0;
    assign readback_array[30][2:2] = (decoded_reg_strb.PIOControl.PIO_CONTROL && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_CONTROL.abort_req.value : '0;
    assign readback_array[30][31:3] = '0;
    assign readback_array[31] = hwif_in.DAT.rd_ack ? hwif_in.DAT.rd_data : '0;
    assign readback_array[32] = hwif_in.DCT.rd_ack ? hwif_in.DCT.rd_data : '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr & ~decoded_strb_is_external;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<33; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign external_rd_ack = readback_external_rd_ack;
    assign cpuif_rd_ack = readback_done | readback_external_rd_ack;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
